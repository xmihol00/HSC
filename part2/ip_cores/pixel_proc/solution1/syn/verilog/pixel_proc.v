// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pixel_proc,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.763125,HLS_SYN_LAT=2571,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=15,HLS_SYN_FF=3369,HLS_SYN_LUT=3493,HLS_VERSION=2020_1}" *)

module pixel_proc (
        ap_clk,
        ap_rst_n,
        video_in_TDATA,
        video_in_TVALID,
        video_in_TREADY,
        video_in_TUSER,
        video_in_TLAST,
        video_out_TDATA,
        video_out_TVALID,
        video_out_TREADY,
        video_out_TUSER,
        video_out_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_pp0_stage1 = 3'd4;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 11;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] video_in_TDATA;
input   video_in_TVALID;
output   video_in_TREADY;
input  [0:0] video_in_TUSER;
input  [0:0] video_in_TLAST;
output  [23:0] video_out_TDATA;
output   video_out_TVALID;
input   video_out_TREADY;
output  [0:0] video_out_TUSER;
output  [0:0] video_out_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg video_in_TREADY;

 reg    ap_rst_n_inv;
reg   [31:0] frames_V_1_data_reg;
reg    frames_V_1_vld_reg;
reg    frames_V_1_vld_in;
reg    frames_V_1_ack_in;
reg   [31:0] rows_V_1_data_reg;
reg    rows_V_1_vld_reg;
reg    rows_V_1_vld_in;
reg    rows_V_1_ack_in;
reg   [31:0] pixels_V_1_data_reg;
reg    pixels_V_1_vld_reg;
reg    pixels_V_1_vld_in;
reg    pixels_V_1_ack_in;
reg   [31:0] sum_before_V_1_data_reg;
reg   [31:0] sum_before_V_1_data_in;
reg    sum_before_V_1_vld_reg;
reg    sum_before_V_1_vld_in;
reg    sum_before_V_1_ack_in;
reg   [31:0] sum_after_V_1_data_reg;
reg   [31:0] sum_after_V_1_data_in;
reg    sum_after_V_1_vld_reg;
reg    sum_after_V_1_vld_in;
reg    sum_after_V_1_ack_in;
reg   [31:0] values_V_1_data_reg;
reg   [31:0] values_V_1_data_in;
reg    values_V_1_vld_reg;
reg    values_V_1_vld_in;
reg    values_V_1_ack_in;
reg   [0:0] read_done_V_1_data_reg;
reg   [0:0] read_done_V_1_data_in;
reg    read_done_V_1_vld_reg;
reg    read_done_V_1_vld_in;
reg    read_done_V_1_ack_in;
wire   [0:0] write_ready_V;
reg   [0:0] write_ready_V_0_data_reg;
reg    write_ready_V_0_vld_reg;
reg    write_ready_V_0_ack_out;
reg   [7:0] shared_memory_V_address0;
reg    shared_memory_V_ce0;
reg    shared_memory_V_we0;
reg   [31:0] shared_memory_V_d0;
wire   [31:0] shared_memory_V_q0;
reg   [31:0] frame_counter_V;
reg   [31:0] row_counter_V;
reg   [31:0] pixel_counter_V;
reg   [1:0] copy1_state;
reg   [7:0] copy1_histogram_V_address0;
reg    copy1_histogram_V_ce0;
reg    copy1_histogram_V_we0;
reg   [21:0] copy1_histogram_V_d0;
wire   [21:0] copy1_histogram_V_q0;
reg   [31:0] copy1_values_V;
reg   [31:0] copy1_sum_before_V;
reg   [0:0] copy1_empty_data_ready_V;
reg   [7:0] copy1_empty_data_V_address0;
reg    copy1_empty_data_V_ce0;
reg    copy1_empty_data_V_we0;
wire   [31:0] copy1_empty_data_V_q0;
reg   [31:0] copy1_sum_after_V;
reg   [1:0] copy2_state;
reg   [7:0] address_counter_V;
reg   [0:0] copy2_empty_data_ready_V;
reg   [31:0] copy2_sum_before_V;
reg   [31:0] copy2_sum_after_V;
reg   [31:0] copy2_values_V;
reg   [7:0] copy2_histogram_V_address0;
reg    copy2_histogram_V_ce0;
reg    copy2_histogram_V_we0;
reg   [21:0] copy2_histogram_V_d0;
wire   [21:0] copy2_histogram_V_q0;
reg   [7:0] copy2_empty_data_V_address0;
reg    copy2_empty_data_V_ce0;
reg    copy2_empty_data_V_we0;
wire   [31:0] copy2_empty_data_V_q0;
reg   [0:0] eol_V_reg_1476;
reg   [0:0] eol_V_reg_1476_pp0_iter2_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_state11_pp0_stage0_iter4;
wire    ap_block_state13_pp0_stage0_iter5;
wire    ap_block_state15_pp0_stage0_iter6;
reg    ap_enable_reg_pp0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] eol_V_reg_1476_pp0_iter4_reg;
reg    ap_enable_reg_pp0_iter5;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_state10_pp0_stage1_iter3;
wire    ap_block_state12_pp0_stage1_iter4;
wire    ap_block_state14_pp0_stage1_iter5;
wire    regslice_both_video_out_data_U_apdone_blk;
reg    ap_block_state6_pp0_stage1_iter6;
reg    ap_block_pp0_stage1_11001;
reg    video_in_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    video_out_TDATA_blk_n;
wire    ap_block_pp0_stage1;
reg   [0:0] sof_V_reg_1470;
reg   [0:0] sof_V_reg_1470_pp0_iter1_reg;
reg   [0:0] sof_V_reg_1470_pp0_iter2_reg;
reg   [0:0] sof_V_reg_1470_pp0_iter3_reg;
reg   [0:0] sof_V_reg_1470_pp0_iter4_reg;
reg   [0:0] sof_V_reg_1470_pp0_iter5_reg;
reg   [0:0] eol_V_reg_1476_pp0_iter1_reg;
reg   [0:0] eol_V_reg_1476_pp0_iter3_reg;
reg   [0:0] eol_V_reg_1476_pp0_iter5_reg;
wire   [7:0] B_V_fu_529_p1;
reg   [7:0] B_V_reg_1481;
reg   [7:0] G_V_reg_1486;
wire   [7:0] R_V_fu_543_p4;
reg   [7:0] R_V_reg_1491;
wire   [24:0] zext_ln703_fu_553_p1;
reg   [24:0] zext_ln703_reg_1496;
wire   [25:0] zext_ln703_3_fu_557_p1;
wire   [26:0] zext_ln703_2_fu_561_p1;
reg   [26:0] zext_ln703_2_reg_1508;
wire   [25:0] grp_fu_1414_p2;
wire  signed [26:0] grp_fu_1420_p3;
reg    ap_enable_reg_pp0_iter1;
wire  signed [26:0] grp_fu_1428_p3;
wire  signed [26:0] grp_fu_1444_p3;
reg  signed [26:0] Cr_V_reg_1545;
reg    ap_enable_reg_pp0_iter2;
wire  signed [26:0] grp_fu_1453_p3;
reg  signed [26:0] Cb_V_reg_1550;
wire   [31:0] add_ln700_2_fu_645_p2;
wire   [26:0] grp_fu_1462_p3;
reg   [26:0] Y_V_reg_1580;
wire   [0:0] copy_select_V_fu_668_p3;
reg   [0:0] copy_select_V_reg_1587;
reg   [0:0] copy_select_V_reg_1587_pp0_iter3_reg;
reg   [0:0] copy_select_V_reg_1587_pp0_iter4_reg;
wire   [0:0] icmp_ln879_fu_680_p2;
reg   [0:0] icmp_ln879_reg_1591;
wire   [0:0] r_fu_689_p2;
reg   [0:0] r_reg_1596;
wire   [0:0] start_V_fu_713_p2;
reg   [0:0] start_V_reg_1611;
wire   [7:0] newY_V_4_fu_755_p2;
reg   [7:0] newY_V_4_reg_1615;
reg   [7:0] newY_V_4_reg_1615_pp0_iter4_reg;
wire   [0:0] grp_read_fu_247_p2;
reg   [0:0] write_ready_V_read_reg_1623;
wire   [63:0] zext_ln544_1_fu_761_p1;
reg   [63:0] zext_ln544_1_reg_1627;
reg   [7:0] copy2_histogram_V_addr_reg_1632;
wire   [1:0] copy1_state_load_load_fu_766_p1;
reg   [1:0] copy1_state_load_reg_1637;
reg   [1:0] copy1_state_load_reg_1637_pp0_iter4_reg;
wire   [63:0] zext_ln544_5_fu_770_p1;
reg   [63:0] zext_ln544_5_reg_1641;
wire   [0:0] grp_fu_463_p2;
reg   [0:0] icmp_ln879_4_reg_1651;
wire   [63:0] zext_ln544_4_fu_781_p1;
reg   [63:0] zext_ln544_4_reg_1655;
reg   [0:0] icmp_ln879_3_reg_1665;
reg   [0:0] icmp_ln879_3_reg_1665_pp0_iter4_reg;
wire   [63:0] zext_ln544_fu_798_p1;
reg   [63:0] zext_ln544_reg_1669;
reg   [7:0] copy1_histogram_V_addr_reg_1674;
wire   [1:0] copy2_state_load_load_fu_803_p1;
reg   [1:0] copy2_state_load_reg_1679;
reg   [1:0] copy2_state_load_reg_1679_pp0_iter4_reg;
wire   [63:0] zext_ln544_3_fu_807_p1;
reg   [63:0] zext_ln544_3_reg_1683;
reg   [0:0] icmp_ln879_2_reg_1693;
wire   [63:0] zext_ln544_2_fu_818_p1;
reg   [63:0] zext_ln544_2_reg_1697;
reg   [0:0] icmp_ln879_1_reg_1707;
reg   [0:0] icmp_ln879_1_reg_1707_pp0_iter4_reg;
wire   [7:0] newY_V_3_fu_906_p3;
reg   [7:0] newY_V_3_reg_1721;
wire   [7:0] newY_V_1_fu_954_p3;
reg   [7:0] newY_V_1_reg_1742;
wire   [47:0] grp_fu_629_p2;
reg   [47:0] r_V_reg_1763;
wire   [46:0] grp_fu_635_p2;
reg   [46:0] r_V_1_reg_1768;
wire   [28:0] B_fixed_V_fu_1062_p4;
reg   [28:0] B_fixed_V_reg_1773;
wire   [0:0] icmp_ln1494_fu_1072_p2;
reg   [0:0] icmp_ln1494_reg_1778;
reg   [28:0] G_fixed_V_reg_1783;
reg   [28:0] R_fixed_V_reg_1789;
reg    ap_block_pp0_stage1_subdone;
wire    ap_CS_fsm_state1;
wire   [7:0] ap_phi_reg_pp0_iter0_tmp_V_reg_438;
reg   [7:0] ap_phi_reg_pp0_iter1_tmp_V_reg_438;
reg   [7:0] ap_phi_reg_pp0_iter2_tmp_V_reg_438;
reg   [7:0] ap_phi_reg_pp0_iter3_tmp_V_reg_438;
reg   [7:0] ap_phi_reg_pp0_iter4_tmp_V_reg_438;
reg   [7:0] ap_phi_reg_pp0_iter5_tmp_V_reg_438;
wire   [31:0] add_ln700_fu_590_p2;
wire   [31:0] add_ln700_1_fu_606_p2;
wire   [31:0] add_ln700_4_fu_1006_p2;
wire   [31:0] add_ln700_5_fu_934_p2;
wire   [31:0] add_ln700_9_fu_1021_p2;
wire   [7:0] grp_fu_469_p2;
wire   [31:0] add_ln700_8_fu_886_p2;
wire   [31:0] add_ln700_10_fu_994_p2;
wire   [31:0] add_ln700_7_fu_979_p2;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage0_01001;
wire   [21:0] add_ln700_6_fu_835_p2;
wire   [31:0] zext_ln209_1_fu_848_p1;
wire   [31:0] zext_ln209_fu_872_p1;
wire   [21:0] add_ln700_3_fu_859_p2;
wire   [25:0] shl_ln_fu_564_p3;
wire   [25:0] shl_ln703_1_fu_575_p3;
wire   [25:0] grp_fu_1436_p3;
wire   [20:0] grp_fu_629_p0;
wire  signed [19:0] grp_fu_635_p0;
wire   [1:0] trunc_ln647_fu_676_p1;
wire   [17:0] trunc_ln718_fu_686_p1;
wire  signed [18:0] grp_fu_701_p0;
wire   [20:0] grp_fu_707_p0;
wire   [0:0] tmp_2_fu_726_p3;
wire   [0:0] tmp_3_fu_738_p3;
wire   [0:0] or_ln412_fu_733_p2;
wire   [0:0] and_ln415_fu_745_p2;
wire   [7:0] zext_ln415_fu_751_p1;
wire   [7:0] p_Val2_6_fu_717_p4;
wire   [31:0] zext_ln700_1_fu_883_p1;
wire   [7:0] newY_V_2_fu_902_p1;
wire   [31:0] zext_ln700_fu_931_p1;
wire   [7:0] newY_V_fu_950_p1;
wire   [31:0] zext_ln700_3_fu_991_p1;
wire   [31:0] zext_ln700_2_fu_1018_p1;
wire   [45:0] lhs_V_fu_1033_p3;
wire  signed [49:0] sext_ln1118_3_fu_1049_p1;
wire   [50:0] zext_ln728_1_fu_1045_p1;
wire   [50:0] zext_ln1192_fu_1052_p1;
wire   [50:0] ret_V_fu_1056_p2;
wire  signed [57:0] sext_ln1118_2_fu_1078_p1;
wire   [58:0] zext_ln728_fu_1041_p1;
wire   [58:0] zext_ln703_5_fu_1081_p1;
wire   [45:0] grp_fu_701_p2;
wire  signed [47:0] sext_ln1118_4_fu_1091_p1;
wire   [58:0] ret_V_9_fu_1085_p2;
wire   [58:0] zext_ln1192_1_fu_1095_p1;
wire   [58:0] ret_V_10_fu_1099_p2;
wire   [47:0] grp_fu_707_p2;
wire  signed [49:0] sext_ln1118_5_fu_1115_p1;
wire   [50:0] zext_ln1192_2_fu_1119_p1;
wire   [50:0] ret_V_11_fu_1123_p2;
wire   [28:0] B_fixed_V_1_fu_1139_p3;
wire   [0:0] tmp_4_fu_1149_p3;
wire   [26:0] trunc_ln200_fu_1145_p1;
wire   [0:0] icmp_ln1494_1_fu_1165_p2;
wire   [28:0] G_fixed_V_1_fu_1170_p3;
wire   [0:0] tmp_5_fu_1181_p3;
wire   [26:0] trunc_ln203_fu_1177_p1;
wire   [0:0] icmp_ln1494_2_fu_1197_p2;
wire   [28:0] R_fixed_V_1_fu_1202_p3;
wire   [0:0] tmp_6_fu_1213_p3;
wire   [26:0] trunc_ln206_fu_1209_p1;
wire   [26:0] B_fixed_V_3_fu_1157_p3;
wire   [17:0] trunc_ln718_1_fu_1247_p1;
wire   [0:0] r_1_fu_1251_p2;
wire   [0:0] tmp_7_fu_1239_p3;
wire   [0:0] tmp_8_fu_1263_p3;
wire   [0:0] or_ln412_1_fu_1257_p2;
wire   [0:0] and_ln415_1_fu_1271_p2;
wire   [7:0] p_Val2_20_fu_1229_p4;
wire   [7:0] zext_ln415_1_fu_1277_p1;
wire   [26:0] G_fixed_V_3_fu_1189_p3;
wire   [17:0] trunc_ln718_2_fu_1305_p1;
wire   [0:0] r_2_fu_1309_p2;
wire   [0:0] tmp_9_fu_1297_p3;
wire   [0:0] tmp_10_fu_1321_p3;
wire   [0:0] or_ln412_2_fu_1315_p2;
wire   [0:0] and_ln415_2_fu_1329_p2;
wire   [7:0] p_Val2_21_fu_1287_p4;
wire   [7:0] zext_ln415_2_fu_1335_p1;
wire   [26:0] R_fixed_V_3_fu_1221_p3;
wire   [17:0] trunc_ln718_3_fu_1363_p1;
wire   [0:0] r_3_fu_1367_p2;
wire   [0:0] tmp_11_fu_1355_p3;
wire   [0:0] tmp_12_fu_1379_p3;
wire   [0:0] or_ln412_3_fu_1373_p2;
wire   [0:0] and_ln415_3_fu_1387_p2;
wire   [7:0] p_Val2_24_fu_1345_p4;
wire   [7:0] zext_ln415_3_fu_1393_p1;
wire   [7:0] p_Val2_27_fu_1397_p2;
wire   [7:0] p_Val2_26_fu_1339_p2;
wire   [7:0] p_Val2_s_fu_1281_p2;
wire   [18:0] grp_fu_1414_p0;
wire   [7:0] grp_fu_1414_p1;
wire  signed [16:0] grp_fu_1420_p0;
wire   [7:0] grp_fu_1420_p1;
wire  signed [25:0] grp_fu_1420_p2;
wire  signed [17:0] grp_fu_1428_p0;
wire   [7:0] grp_fu_1428_p1;
wire   [25:0] grp_fu_1428_p2;
wire   [16:0] grp_fu_1436_p0;
wire   [7:0] grp_fu_1436_p1;
wire  signed [18:0] grp_fu_1444_p0;
wire   [7:0] grp_fu_1444_p1;
wire  signed [18:0] grp_fu_1453_p0;
wire   [7:0] grp_fu_1453_p1;
wire   [19:0] grp_fu_1462_p0;
wire   [7:0] grp_fu_1462_p1;
wire   [25:0] grp_fu_1462_p2;
reg    grp_fu_629_ce;
reg    grp_fu_635_ce;
reg    grp_fu_701_ce;
reg    grp_fu_707_ce;
reg    grp_fu_1414_ce;
reg    grp_fu_1420_ce;
reg    grp_fu_1428_ce;
reg    grp_fu_1436_ce;
reg    grp_fu_1444_ce;
reg    grp_fu_1453_ce;
reg    grp_fu_1462_ce;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_video_in_data_U_apdone_blk;
wire   [23:0] video_in_TDATA_int;
wire    video_in_TVALID_int;
reg    video_in_TREADY_int;
wire    regslice_both_video_in_data_U_ack_in;
wire    regslice_both_video_in_user_V_U_apdone_blk;
wire   [0:0] video_in_TUSER_int;
wire    regslice_both_video_in_user_V_U_vld_out;
wire    regslice_both_video_in_user_V_U_ack_in;
wire    regslice_both_video_in_last_V_U_apdone_blk;
wire   [0:0] video_in_TLAST_int;
wire    regslice_both_video_in_last_V_U_vld_out;
wire    regslice_both_video_in_last_V_U_ack_in;
wire   [23:0] video_out_TDATA_int;
reg    video_out_TVALID_int;
wire    video_out_TREADY_int;
wire    regslice_both_video_out_data_U_vld_out;
wire    regslice_both_video_out_user_V_U_apdone_blk;
wire    regslice_both_video_out_user_V_U_ack_in_dummy;
wire    regslice_both_video_out_user_V_U_vld_out;
wire    regslice_both_video_out_last_V_U_apdone_blk;
wire    regslice_both_video_out_last_V_U_ack_in_dummy;
wire    regslice_both_video_out_last_V_U_vld_out;
wire   [24:0] grp_fu_1420_p10;
wire   [26:0] grp_fu_1420_p20;
wire   [26:0] grp_fu_1428_p20;
wire   [26:0] grp_fu_1462_p20;
reg    ap_condition_882;
reg    ap_condition_1530;
reg    ap_condition_1533;
reg    ap_condition_738;
reg    ap_condition_369;
reg    ap_condition_896;
reg    ap_condition_1529;
reg    ap_condition_1547;
reg    ap_condition_811;
reg    ap_condition_1552;
reg    ap_condition_1555;
reg    ap_condition_1559;
reg    ap_condition_1563;
reg    ap_condition_680;
reg    ap_condition_873;

// power-on initialization
initial begin
#0 frames_V_1_data_reg = 32'd0;
#0 frames_V_1_vld_reg = 1'b0;
#0 rows_V_1_data_reg = 32'd0;
#0 rows_V_1_vld_reg = 1'b0;
#0 pixels_V_1_data_reg = 32'd0;
#0 pixels_V_1_vld_reg = 1'b0;
#0 sum_before_V_1_data_reg = 32'd0;
#0 sum_before_V_1_vld_reg = 1'b0;
#0 sum_after_V_1_data_reg = 32'd0;
#0 sum_after_V_1_vld_reg = 1'b0;
#0 values_V_1_data_reg = 32'd0;
#0 values_V_1_vld_reg = 1'b0;
#0 read_done_V_1_data_reg = 1'd0;
#0 read_done_V_1_vld_reg = 1'b0;
#0 write_ready_V_0_data_reg = 1'd0;
#0 write_ready_V_0_vld_reg = 1'b0;
#0 frame_counter_V = 32'd4294967295;
#0 row_counter_V = 32'd0;
#0 pixel_counter_V = 32'd0;
#0 copy1_state = 2'd0;
#0 copy1_values_V = 32'd0;
#0 copy1_sum_before_V = 32'd0;
#0 copy1_empty_data_ready_V = 1'd0;
#0 copy1_sum_after_V = 32'd0;
#0 copy2_state = 2'd0;
#0 address_counter_V = 8'd0;
#0 copy2_empty_data_ready_V = 1'd0;
#0 copy2_sum_before_V = 32'd0;
#0 copy2_sum_after_V = 32'd0;
#0 copy2_values_V = 32'd0;
#0 eol_V_reg_1476 = 1'd0;
#0 eol_V_reg_1476_pp0_iter2_reg = 1'd0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 eol_V_reg_1476_pp0_iter4_reg = 1'd0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 sof_V_reg_1470 = 1'd0;
#0 sof_V_reg_1470_pp0_iter1_reg = 1'd0;
#0 sof_V_reg_1470_pp0_iter2_reg = 1'd0;
#0 sof_V_reg_1470_pp0_iter3_reg = 1'd0;
#0 sof_V_reg_1470_pp0_iter4_reg = 1'd0;
#0 sof_V_reg_1470_pp0_iter5_reg = 1'd0;
#0 eol_V_reg_1476_pp0_iter1_reg = 1'd0;
#0 eol_V_reg_1476_pp0_iter3_reg = 1'd0;
#0 eol_V_reg_1476_pp0_iter5_reg = 1'd0;
#0 B_V_reg_1481 = 8'd0;
#0 G_V_reg_1486 = 8'd0;
#0 R_V_reg_1491 = 8'd0;
#0 zext_ln703_reg_1496 = 25'd0;
#0 zext_ln703_2_reg_1508 = 27'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 Cr_V_reg_1545 = 27'd0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 Cb_V_reg_1550 = 27'd0;
#0 Y_V_reg_1580 = 27'd0;
#0 copy_select_V_reg_1587 = 1'd0;
#0 copy_select_V_reg_1587_pp0_iter3_reg = 1'd0;
#0 copy_select_V_reg_1587_pp0_iter4_reg = 1'd0;
#0 icmp_ln879_reg_1591 = 1'd0;
#0 r_reg_1596 = 1'd0;
#0 start_V_reg_1611 = 1'd0;
#0 newY_V_4_reg_1615 = 8'd0;
#0 newY_V_4_reg_1615_pp0_iter4_reg = 8'd0;
#0 write_ready_V_read_reg_1623 = 1'd0;
#0 zext_ln544_1_reg_1627 = 64'd0;
#0 copy2_histogram_V_addr_reg_1632 = 8'd0;
#0 copy1_state_load_reg_1637 = 2'd0;
#0 copy1_state_load_reg_1637_pp0_iter4_reg = 2'd0;
#0 zext_ln544_5_reg_1641 = 64'd0;
#0 icmp_ln879_4_reg_1651 = 1'd0;
#0 zext_ln544_4_reg_1655 = 64'd0;
#0 icmp_ln879_3_reg_1665 = 1'd0;
#0 icmp_ln879_3_reg_1665_pp0_iter4_reg = 1'd0;
#0 zext_ln544_reg_1669 = 64'd0;
#0 copy1_histogram_V_addr_reg_1674 = 8'd0;
#0 copy2_state_load_reg_1679 = 2'd0;
#0 copy2_state_load_reg_1679_pp0_iter4_reg = 2'd0;
#0 zext_ln544_3_reg_1683 = 64'd0;
#0 icmp_ln879_2_reg_1693 = 1'd0;
#0 zext_ln544_2_reg_1697 = 64'd0;
#0 icmp_ln879_1_reg_1707 = 1'd0;
#0 icmp_ln879_1_reg_1707_pp0_iter4_reg = 1'd0;
#0 newY_V_3_reg_1721 = 8'd0;
#0 newY_V_1_reg_1742 = 8'd0;
#0 r_V_reg_1763 = 48'd0;
#0 r_V_1_reg_1768 = 47'd0;
#0 B_fixed_V_reg_1773 = 29'd0;
#0 icmp_ln1494_reg_1778 = 1'd0;
#0 G_fixed_V_reg_1783 = 29'd0;
#0 R_fixed_V_reg_1789 = 29'd0;
#0 ap_phi_reg_pp0_iter1_tmp_V_reg_438 = 8'd0;
#0 ap_phi_reg_pp0_iter2_tmp_V_reg_438 = 8'd0;
#0 ap_phi_reg_pp0_iter3_tmp_V_reg_438 = 8'd0;
#0 ap_phi_reg_pp0_iter4_tmp_V_reg_438 = 8'd0;
#0 ap_phi_reg_pp0_iter5_tmp_V_reg_438 = 8'd0;
end

pixel_proc_copy1_histogram_V #(
    .DataWidth( 22 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
copy1_histogram_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(copy1_histogram_V_address0),
    .ce0(copy1_histogram_V_ce0),
    .we0(copy1_histogram_V_we0),
    .d0(copy1_histogram_V_d0),
    .q0(copy1_histogram_V_q0)
);

pixel_proc_copy1_empty_data_V #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
copy1_empty_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(copy1_empty_data_V_address0),
    .ce0(copy1_empty_data_V_ce0),
    .we0(copy1_empty_data_V_we0),
    .d0(shared_memory_V_q0),
    .q0(copy1_empty_data_V_q0)
);

pixel_proc_copy1_histogram_V #(
    .DataWidth( 22 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
copy2_histogram_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(copy2_histogram_V_address0),
    .ce0(copy2_histogram_V_ce0),
    .we0(copy2_histogram_V_we0),
    .d0(copy2_histogram_V_d0),
    .q0(copy2_histogram_V_q0)
);

pixel_proc_copy1_empty_data_V #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
copy2_empty_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(copy2_empty_data_V_address0),
    .ce0(copy2_empty_data_V_ce0),
    .we0(copy2_empty_data_V_we0),
    .d0(shared_memory_V_q0),
    .q0(copy2_empty_data_V_q0)
);

pixel_proc_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
pixel_proc_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .frames_V(frames_V_1_data_reg),
    .frames_V_ap_vld(frames_V_1_vld_reg),
    .rows_V(rows_V_1_data_reg),
    .rows_V_ap_vld(rows_V_1_vld_reg),
    .pixels_V(pixels_V_1_data_reg),
    .pixels_V_ap_vld(pixels_V_1_vld_reg),
    .sum_before_V(sum_before_V_1_data_reg),
    .sum_before_V_ap_vld(sum_before_V_1_vld_reg),
    .sum_after_V(sum_after_V_1_data_reg),
    .sum_after_V_ap_vld(sum_after_V_1_vld_reg),
    .values_V(values_V_1_data_reg),
    .values_V_ap_vld(values_V_1_vld_reg),
    .read_done_V(read_done_V_1_data_reg),
    .read_done_V_ap_vld(read_done_V_1_vld_reg),
    .write_ready_V(write_ready_V),
    .shared_memory_V_address0(shared_memory_V_address0),
    .shared_memory_V_ce0(shared_memory_V_ce0),
    .shared_memory_V_we0(shared_memory_V_we0),
    .shared_memory_V_d0(shared_memory_V_d0),
    .shared_memory_V_q0(shared_memory_V_q0)
);

pixel_proc_mul_21ns_27s_48_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 27 ),
    .dout_WIDTH( 48 ))
pixel_proc_mul_21ns_27s_48_7_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_629_p0),
    .din1(grp_fu_1453_p3),
    .ce(grp_fu_629_ce),
    .dout(grp_fu_629_p2)
);

pixel_proc_mul_20s_27s_47_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 27 ),
    .dout_WIDTH( 47 ))
pixel_proc_mul_20s_27s_47_7_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_635_p0),
    .din1(grp_fu_1444_p3),
    .ce(grp_fu_635_ce),
    .dout(grp_fu_635_p2)
);

pixel_proc_mul_19s_27s_46_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 27 ),
    .dout_WIDTH( 46 ))
pixel_proc_mul_19s_27s_46_7_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_701_p0),
    .din1(Cb_V_reg_1550),
    .ce(grp_fu_701_ce),
    .dout(grp_fu_701_p2)
);

pixel_proc_mul_21ns_27s_48_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 27 ),
    .dout_WIDTH( 48 ))
pixel_proc_mul_21ns_27s_48_7_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_707_p0),
    .din1(Cr_V_reg_1545),
    .ce(grp_fu_707_ce),
    .dout(grp_fu_707_p2)
);

pixel_proc_mul_mul_19ns_8ns_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 26 ))
pixel_proc_mul_mul_19ns_8ns_26_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1414_p0),
    .din1(grp_fu_1414_p1),
    .ce(grp_fu_1414_ce),
    .dout(grp_fu_1414_p2)
);

pixel_proc_mac_muladd_17s_8ns_26s_27_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 27 ))
pixel_proc_mac_muladd_17s_8ns_26s_27_bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1420_p0),
    .din1(grp_fu_1420_p1),
    .din2(grp_fu_1420_p2),
    .ce(grp_fu_1420_ce),
    .dout(grp_fu_1420_p3)
);

pixel_proc_mac_muladd_18s_8ns_26ns_27cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 27 ))
pixel_proc_mac_muladd_18s_8ns_26ns_27cud_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1428_p0),
    .din1(grp_fu_1428_p1),
    .din2(grp_fu_1428_p2),
    .ce(grp_fu_1428_ce),
    .dout(grp_fu_1428_p3)
);

pixel_proc_mac_muladd_17ns_8ns_26ns_2dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
pixel_proc_mac_muladd_17ns_8ns_26ns_2dEe_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1436_p0),
    .din1(grp_fu_1436_p1),
    .din2(grp_fu_1414_p2),
    .ce(grp_fu_1436_ce),
    .dout(grp_fu_1436_p3)
);

pixel_proc_mac_muladd_19s_8ns_27s_27_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 27 ),
    .dout_WIDTH( 27 ))
pixel_proc_mac_muladd_19s_8ns_27s_27_eOg_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1444_p0),
    .din1(grp_fu_1444_p1),
    .din2(grp_fu_1420_p3),
    .ce(grp_fu_1444_ce),
    .dout(grp_fu_1444_p3)
);

pixel_proc_mac_muladd_19s_8ns_27s_27_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 27 ),
    .dout_WIDTH( 27 ))
pixel_proc_mac_muladd_19s_8ns_27s_27_eOg_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1453_p0),
    .din1(grp_fu_1453_p1),
    .din2(grp_fu_1428_p3),
    .ce(grp_fu_1453_ce),
    .dout(grp_fu_1453_p3)
);

pixel_proc_mac_muladd_20ns_8ns_26ns_2fYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 27 ))
pixel_proc_mac_muladd_20ns_8ns_26ns_2fYi_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1462_p0),
    .din1(grp_fu_1462_p1),
    .din2(grp_fu_1462_p2),
    .ce(grp_fu_1462_ce),
    .dout(grp_fu_1462_p3)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_video_in_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(video_in_TDATA),
    .vld_in(video_in_TVALID),
    .ack_in(regslice_both_video_in_data_U_ack_in),
    .data_out(video_in_TDATA_int),
    .vld_out(video_in_TVALID_int),
    .ack_out(video_in_TREADY_int),
    .apdone_blk(regslice_both_video_in_data_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_video_in_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(video_in_TUSER),
    .vld_in(video_in_TVALID),
    .ack_in(regslice_both_video_in_user_V_U_ack_in),
    .data_out(video_in_TUSER_int),
    .vld_out(regslice_both_video_in_user_V_U_vld_out),
    .ack_out(video_in_TREADY_int),
    .apdone_blk(regslice_both_video_in_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_video_in_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(video_in_TLAST),
    .vld_in(video_in_TVALID),
    .ack_in(regslice_both_video_in_last_V_U_ack_in),
    .data_out(video_in_TLAST_int),
    .vld_out(regslice_both_video_in_last_V_U_vld_out),
    .ack_out(video_in_TREADY_int),
    .apdone_blk(regslice_both_video_in_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_video_out_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(video_out_TDATA_int),
    .vld_in(video_out_TVALID_int),
    .ack_in(video_out_TREADY_int),
    .data_out(video_out_TDATA),
    .vld_out(regslice_both_video_out_data_U_vld_out),
    .ack_out(video_out_TREADY),
    .apdone_blk(regslice_both_video_out_data_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_video_out_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(sof_V_reg_1470_pp0_iter5_reg),
    .vld_in(video_out_TVALID_int),
    .ack_in(regslice_both_video_out_user_V_U_ack_in_dummy),
    .data_out(video_out_TUSER),
    .vld_out(regslice_both_video_out_user_V_U_vld_out),
    .ack_out(video_out_TREADY),
    .apdone_blk(regslice_both_video_out_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_video_out_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(eol_V_reg_1476_pp0_iter5_reg),
    .vld_in(video_out_TVALID_int),
    .ack_in(regslice_both_video_out_last_V_U_ack_in_dummy),
    .data_out(video_out_TLAST),
    .vld_out(regslice_both_video_out_last_V_U_vld_out),
    .ack_out(video_out_TREADY),
    .apdone_blk(regslice_both_video_out_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_V_reg_1481 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            B_V_reg_1481 <= B_V_fu_529_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_fixed_V_reg_1773 <= 29'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            B_fixed_V_reg_1773 <= {{ret_V_fu_1056_p2[47:19]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        Cb_V_reg_1550 <= 27'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Cb_V_reg_1550 <= grp_fu_1453_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        Cr_V_reg_1545 <= 27'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Cr_V_reg_1545 <= grp_fu_1444_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        G_V_reg_1486 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            G_V_reg_1486 <= {{video_in_TDATA_int[15:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        G_fixed_V_reg_1783 <= 29'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            G_fixed_V_reg_1783 <= {{ret_V_10_fu_1099_p2[47:19]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        R_V_reg_1491 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            R_V_reg_1491 <= {{video_in_TDATA_int[23:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        R_fixed_V_reg_1789 <= 29'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            R_fixed_V_reg_1789 <= {{ret_V_11_fu_1123_p2[47:19]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        Y_V_reg_1580 <= 27'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Y_V_reg_1580 <= grp_fu_1462_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        address_counter_V <= 8'd0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_11001) & (start_V_fu_713_p2 == 1'd1) & (copy_select_V_reg_1587 == 1'd1) & (copy2_state_load_load_fu_803_p1 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((copy2_state_load_load_fu_803_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (grp_read_fu_247_p2 == 1'd1) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (start_V_fu_713_p2 == 1'd1) & (copy1_state_load_load_fu_766_p1 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0)) | ((copy1_state_load_load_fu_766_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (grp_read_fu_247_p2 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0)))) begin
            address_counter_V <= 8'd0;
        end else if ((((copy2_state_load_load_fu_803_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((copy2_state_load_load_fu_803_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((copy1_state_load_load_fu_766_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0)) | ((copy1_state_load_load_fu_766_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0)))) begin
            address_counter_V <= grp_fu_469_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_phi_reg_pp0_iter1_tmp_V_reg_438 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1))) begin
            ap_phi_reg_pp0_iter1_tmp_V_reg_438 <= ap_phi_reg_pp0_iter0_tmp_V_reg_438;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_phi_reg_pp0_iter2_tmp_V_reg_438 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_phi_reg_pp0_iter2_tmp_V_reg_438 <= ap_phi_reg_pp0_iter1_tmp_V_reg_438;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_phi_reg_pp0_iter3_tmp_V_reg_438 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_phi_reg_pp0_iter3_tmp_V_reg_438 <= ap_phi_reg_pp0_iter2_tmp_V_reg_438;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_phi_reg_pp0_iter4_tmp_V_reg_438 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            ap_phi_reg_pp0_iter4_tmp_V_reg_438 <= ap_phi_reg_pp0_iter3_tmp_V_reg_438;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_phi_reg_pp0_iter5_tmp_V_reg_438 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587_pp0_iter4_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_tmp_V_reg_438 <= newY_V_3_reg_1721;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_phi_reg_pp0_iter5_tmp_V_reg_438 <= newY_V_1_reg_1742;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_phi_reg_pp0_iter5_tmp_V_reg_438 <= ap_phi_reg_pp0_iter4_tmp_V_reg_438;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy1_empty_data_ready_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_condition_882)) begin
            if (((start_V_reg_1611 == 1'd1) & (copy1_state_load_reg_1637 == 2'd0))) begin
                copy1_empty_data_ready_V <= 1'd0;
            end else if (((copy1_state_load_reg_1637 == 2'd3) & (icmp_ln879_4_reg_1651 == 1'd1))) begin
                copy1_empty_data_ready_V <= 1'd1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy1_histogram_V_addr_reg_1674 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            copy1_histogram_V_addr_reg_1674 <= zext_ln544_fu_798_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy1_state <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (start_V_fu_713_p2 == 1'd1) & (copy1_state_load_load_fu_766_p1 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0))) begin
            copy1_state <= 2'd1;
        end else if (((copy1_state_load_load_fu_766_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (grp_fu_463_p2 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0))) begin
            copy1_state <= 2'd2;
        end else if (((copy1_state_load_load_fu_766_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (grp_read_fu_247_p2 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0))) begin
            copy1_state <= 2'd3;
        end else if ((((1'b0 == ap_block_pp0_stage1_11001) & (copy_select_V_fu_668_p3 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((copy1_state_load_load_fu_766_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (grp_fu_463_p2 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0)))) begin
            copy1_state <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy1_state_load_reg_1637 <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0))) begin
            copy1_state_load_reg_1637 <= copy1_state;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy1_state_load_reg_1637_pp0_iter4_reg <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            copy1_state_load_reg_1637_pp0_iter4_reg <= copy1_state_load_reg_1637;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy1_sum_after_V <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            copy1_sum_after_V <= add_ln700_9_fu_1021_p2;
        end else if (((copy1_state_load_reg_1637_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln879_3_reg_1665_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0))) begin
            copy1_sum_after_V <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy1_sum_before_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_condition_369)) begin
            if ((copy_select_V_reg_1587_pp0_iter3_reg == 1'd1)) begin
                copy1_sum_before_V <= add_ln700_5_fu_934_p2;
            end else if ((1'b1 == ap_condition_738)) begin
                copy1_sum_before_V <= 32'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy1_values_V <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            copy1_values_V <= add_ln700_4_fu_1006_p2;
        end else if (((copy1_state_load_reg_1637_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln879_3_reg_1665_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0))) begin
            copy1_values_V <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy2_empty_data_ready_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_condition_896)) begin
            if (((start_V_reg_1611 == 1'd1) & (copy2_state_load_reg_1679 == 2'd0))) begin
                copy2_empty_data_ready_V <= 1'd0;
            end else if (((copy2_state_load_reg_1679 == 2'd3) & (icmp_ln879_2_reg_1693 == 1'd1))) begin
                copy2_empty_data_ready_V <= 1'd1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy2_histogram_V_addr_reg_1632 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0))) begin
            copy2_histogram_V_addr_reg_1632 <= zext_ln544_1_fu_761_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy2_state <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (start_V_fu_713_p2 == 1'd1) & (copy_select_V_reg_1587 == 1'd1) & (copy2_state_load_load_fu_803_p1 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            copy2_state <= 2'd1;
        end else if (((copy2_state_load_load_fu_803_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (grp_fu_463_p2 == 1'd1) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            copy2_state <= 2'd2;
        end else if (((copy2_state_load_load_fu_803_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (grp_read_fu_247_p2 == 1'd1) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            copy2_state <= 2'd3;
        end else if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (copy_select_V_fu_668_p3 == 1'd0)) | ((copy2_state_load_load_fu_803_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (grp_fu_463_p2 == 1'd1) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            copy2_state <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy2_state_load_reg_1679 <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            copy2_state_load_reg_1679 <= copy2_state;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy2_state_load_reg_1679_pp0_iter4_reg <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            copy2_state_load_reg_1679_pp0_iter4_reg <= copy2_state_load_reg_1679;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy2_sum_after_V <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587_pp0_iter4_reg == 1'd0))) begin
            copy2_sum_after_V <= add_ln700_10_fu_994_p2;
        end else if (((copy2_state_load_reg_1679_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln879_1_reg_1707_pp0_iter4_reg == 1'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            copy2_sum_after_V <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy2_sum_before_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_condition_369)) begin
            if ((1'b1 == ap_condition_811)) begin
                copy2_sum_before_V <= 32'd0;
            end else if ((copy_select_V_reg_1587_pp0_iter3_reg == 1'd0)) begin
                copy2_sum_before_V <= add_ln700_8_fu_886_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy2_values_V <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587_pp0_iter4_reg == 1'd0))) begin
            copy2_values_V <= add_ln700_7_fu_979_p2;
        end else if (((copy2_state_load_reg_1679_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln879_1_reg_1707_pp0_iter4_reg == 1'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            copy2_values_V <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy_select_V_reg_1587 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            copy_select_V_reg_1587 <= frame_counter_V[32'd2];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy_select_V_reg_1587_pp0_iter3_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            copy_select_V_reg_1587_pp0_iter3_reg <= copy_select_V_reg_1587;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        copy_select_V_reg_1587_pp0_iter4_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            copy_select_V_reg_1587_pp0_iter4_reg <= copy_select_V_reg_1587_pp0_iter3_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        eol_V_reg_1476 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            eol_V_reg_1476 <= video_in_TLAST_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        eol_V_reg_1476_pp0_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            eol_V_reg_1476_pp0_iter1_reg <= eol_V_reg_1476;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        eol_V_reg_1476_pp0_iter2_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            eol_V_reg_1476_pp0_iter2_reg <= eol_V_reg_1476_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        eol_V_reg_1476_pp0_iter3_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            eol_V_reg_1476_pp0_iter3_reg <= eol_V_reg_1476_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        eol_V_reg_1476_pp0_iter4_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            eol_V_reg_1476_pp0_iter4_reg <= eol_V_reg_1476_pp0_iter3_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        eol_V_reg_1476_pp0_iter5_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            eol_V_reg_1476_pp0_iter5_reg <= eol_V_reg_1476_pp0_iter4_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frame_counter_V <= 32'd4294967295;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (sof_V_reg_1470_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            frame_counter_V <= add_ln700_fu_590_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frames_V_1_data_reg <= 32'd0;
    end else begin
        if ((((frames_V_1_vld_reg == 1'b0) & (frames_V_1_vld_in == 1'b1)) | ((1'b1 == 1'b1) & (frames_V_1_vld_in == 1'b1) & (frames_V_1_vld_reg == 1'b1)))) begin
            frames_V_1_data_reg <= frame_counter_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frames_V_1_vld_reg <= 1'b0;
    end else begin
        if (((frames_V_1_vld_reg == 1'b0) & (frames_V_1_vld_in == 1'b1))) begin
            frames_V_1_vld_reg <= 1'b1;
        end else if (((frames_V_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (frames_V_1_vld_reg == 1'b1))) begin
            frames_V_1_vld_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln1494_reg_1778 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            icmp_ln1494_reg_1778 <= icmp_ln1494_fu_1072_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln879_1_reg_1707 <= 1'd0;
    end else begin
        if (((copy2_state_load_load_fu_803_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln879_1_reg_1707 <= grp_fu_463_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln879_1_reg_1707_pp0_iter4_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln879_1_reg_1707_pp0_iter4_reg <= icmp_ln879_1_reg_1707;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln879_2_reg_1693 <= 1'd0;
    end else begin
        if (((copy2_state_load_load_fu_803_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln879_2_reg_1693 <= grp_fu_463_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln879_3_reg_1665 <= 1'd0;
    end else begin
        if (((copy1_state_load_load_fu_766_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0))) begin
            icmp_ln879_3_reg_1665 <= grp_fu_463_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln879_3_reg_1665_pp0_iter4_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln879_3_reg_1665_pp0_iter4_reg <= icmp_ln879_3_reg_1665;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln879_4_reg_1651 <= 1'd0;
    end else begin
        if (((copy1_state_load_load_fu_766_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0))) begin
            icmp_ln879_4_reg_1651 <= grp_fu_463_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln879_reg_1591 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            icmp_ln879_reg_1591 <= icmp_ln879_fu_680_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        newY_V_1_reg_1742 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            newY_V_1_reg_1742 <= newY_V_1_fu_954_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        newY_V_3_reg_1721 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0))) begin
            newY_V_3_reg_1721 <= newY_V_3_fu_906_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        newY_V_4_reg_1615 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            newY_V_4_reg_1615 <= newY_V_4_fu_755_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        newY_V_4_reg_1615_pp0_iter4_reg <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            newY_V_4_reg_1615_pp0_iter4_reg <= newY_V_4_reg_1615;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pixel_counter_V <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            pixel_counter_V <= add_ln700_2_fu_645_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pixels_V_1_data_reg <= 32'd0;
    end else begin
        if ((((pixels_V_1_vld_reg == 1'b0) & (pixels_V_1_vld_in == 1'b1)) | ((1'b1 == 1'b1) & (pixels_V_1_vld_in == 1'b1) & (pixels_V_1_vld_reg == 1'b1)))) begin
            pixels_V_1_data_reg <= add_ln700_2_fu_645_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pixels_V_1_vld_reg <= 1'b0;
    end else begin
        if (((pixels_V_1_vld_reg == 1'b0) & (pixels_V_1_vld_in == 1'b1))) begin
            pixels_V_1_vld_reg <= 1'b1;
        end else if (((pixels_V_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (pixels_V_1_vld_reg == 1'b1))) begin
            pixels_V_1_vld_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        r_V_1_reg_1768 <= 47'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            r_V_1_reg_1768 <= grp_fu_635_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        r_V_reg_1763 <= 48'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            r_V_reg_1763 <= grp_fu_629_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        r_reg_1596 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            r_reg_1596 <= r_fu_689_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        read_done_V_1_data_reg <= 1'd0;
    end else begin
        if ((((read_done_V_1_vld_reg == 1'b0) & (read_done_V_1_vld_in == 1'b1)) | ((1'b1 == 1'b1) & (read_done_V_1_vld_in == 1'b1) & (read_done_V_1_vld_reg == 1'b1)))) begin
            read_done_V_1_data_reg <= read_done_V_1_data_in;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        read_done_V_1_vld_reg <= 1'b0;
    end else begin
        if (((read_done_V_1_vld_reg == 1'b0) & (read_done_V_1_vld_in == 1'b1))) begin
            read_done_V_1_vld_reg <= 1'b1;
        end else if (((read_done_V_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (read_done_V_1_vld_reg == 1'b1))) begin
            read_done_V_1_vld_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        row_counter_V <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (eol_V_reg_1476_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            row_counter_V <= add_ln700_1_fu_606_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        rows_V_1_data_reg <= 32'd0;
    end else begin
        if ((((rows_V_1_vld_reg == 1'b0) & (rows_V_1_vld_in == 1'b1)) | ((1'b1 == 1'b1) & (rows_V_1_vld_in == 1'b1) & (rows_V_1_vld_reg == 1'b1)))) begin
            rows_V_1_data_reg <= row_counter_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        rows_V_1_vld_reg <= 1'b0;
    end else begin
        if (((rows_V_1_vld_reg == 1'b0) & (rows_V_1_vld_in == 1'b1))) begin
            rows_V_1_vld_reg <= 1'b1;
        end else if (((rows_V_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (rows_V_1_vld_reg == 1'b1))) begin
            rows_V_1_vld_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sof_V_reg_1470 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sof_V_reg_1470 <= video_in_TUSER_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sof_V_reg_1470_pp0_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sof_V_reg_1470_pp0_iter1_reg <= sof_V_reg_1470;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sof_V_reg_1470_pp0_iter2_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sof_V_reg_1470_pp0_iter2_reg <= sof_V_reg_1470_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sof_V_reg_1470_pp0_iter3_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sof_V_reg_1470_pp0_iter3_reg <= sof_V_reg_1470_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sof_V_reg_1470_pp0_iter4_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sof_V_reg_1470_pp0_iter4_reg <= sof_V_reg_1470_pp0_iter3_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sof_V_reg_1470_pp0_iter5_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sof_V_reg_1470_pp0_iter5_reg <= sof_V_reg_1470_pp0_iter4_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        start_V_reg_1611 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            start_V_reg_1611 <= start_V_fu_713_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sum_after_V_1_data_reg <= 32'd0;
    end else begin
        if ((((sum_after_V_1_vld_reg == 1'b0) & (sum_after_V_1_vld_in == 1'b1)) | ((1'b1 == 1'b1) & (sum_after_V_1_vld_in == 1'b1) & (sum_after_V_1_vld_reg == 1'b1)))) begin
            sum_after_V_1_data_reg <= sum_after_V_1_data_in;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sum_after_V_1_vld_reg <= 1'b0;
    end else begin
        if (((sum_after_V_1_vld_reg == 1'b0) & (sum_after_V_1_vld_in == 1'b1))) begin
            sum_after_V_1_vld_reg <= 1'b1;
        end else if (((sum_after_V_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (sum_after_V_1_vld_reg == 1'b1))) begin
            sum_after_V_1_vld_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sum_before_V_1_data_reg <= 32'd0;
    end else begin
        if ((((sum_before_V_1_vld_reg == 1'b0) & (sum_before_V_1_vld_in == 1'b1)) | ((1'b1 == 1'b1) & (sum_before_V_1_vld_in == 1'b1) & (sum_before_V_1_vld_reg == 1'b1)))) begin
            sum_before_V_1_data_reg <= sum_before_V_1_data_in;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sum_before_V_1_vld_reg <= 1'b0;
    end else begin
        if (((sum_before_V_1_vld_reg == 1'b0) & (sum_before_V_1_vld_in == 1'b1))) begin
            sum_before_V_1_vld_reg <= 1'b1;
        end else if (((sum_before_V_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (sum_before_V_1_vld_reg == 1'b1))) begin
            sum_before_V_1_vld_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        values_V_1_data_reg <= 32'd0;
    end else begin
        if ((((values_V_1_vld_reg == 1'b0) & (values_V_1_vld_in == 1'b1)) | ((1'b1 == 1'b1) & (values_V_1_vld_in == 1'b1) & (values_V_1_vld_reg == 1'b1)))) begin
            values_V_1_data_reg <= values_V_1_data_in;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        values_V_1_vld_reg <= 1'b0;
    end else begin
        if (((values_V_1_vld_reg == 1'b0) & (values_V_1_vld_in == 1'b1))) begin
            values_V_1_vld_reg <= 1'b1;
        end else if (((values_V_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (values_V_1_vld_reg == 1'b1))) begin
            values_V_1_vld_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        write_ready_V_0_data_reg <= 1'd0;
    end else begin
        if ((((write_ready_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((write_ready_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (write_ready_V_0_vld_reg == 1'b1)))) begin
            write_ready_V_0_data_reg <= write_ready_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        write_ready_V_read_reg_1623 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            write_ready_V_read_reg_1623 <= write_ready_V_0_data_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln544_1_reg_1627[0] <= 1'b0;
        zext_ln544_1_reg_1627[1] <= 1'b0;
        zext_ln544_1_reg_1627[2] <= 1'b0;
        zext_ln544_1_reg_1627[3] <= 1'b0;
        zext_ln544_1_reg_1627[4] <= 1'b0;
        zext_ln544_1_reg_1627[5] <= 1'b0;
        zext_ln544_1_reg_1627[6] <= 1'b0;
        zext_ln544_1_reg_1627[7] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0))) begin
                        zext_ln544_1_reg_1627[7 : 0] <= zext_ln544_1_fu_761_p1[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln544_2_reg_1697[0] <= 1'b0;
        zext_ln544_2_reg_1697[1] <= 1'b0;
        zext_ln544_2_reg_1697[2] <= 1'b0;
        zext_ln544_2_reg_1697[3] <= 1'b0;
        zext_ln544_2_reg_1697[4] <= 1'b0;
        zext_ln544_2_reg_1697[5] <= 1'b0;
        zext_ln544_2_reg_1697[6] <= 1'b0;
        zext_ln544_2_reg_1697[7] <= 1'b0;
    end else begin
        if (((copy2_state_load_load_fu_803_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        zext_ln544_2_reg_1697[7 : 0] <= zext_ln544_2_fu_818_p1[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln544_3_reg_1683[0] <= 1'b0;
        zext_ln544_3_reg_1683[1] <= 1'b0;
        zext_ln544_3_reg_1683[2] <= 1'b0;
        zext_ln544_3_reg_1683[3] <= 1'b0;
        zext_ln544_3_reg_1683[4] <= 1'b0;
        zext_ln544_3_reg_1683[5] <= 1'b0;
        zext_ln544_3_reg_1683[6] <= 1'b0;
        zext_ln544_3_reg_1683[7] <= 1'b0;
    end else begin
        if (((copy2_state_load_load_fu_803_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        zext_ln544_3_reg_1683[7 : 0] <= zext_ln544_3_fu_807_p1[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln544_4_reg_1655[0] <= 1'b0;
        zext_ln544_4_reg_1655[1] <= 1'b0;
        zext_ln544_4_reg_1655[2] <= 1'b0;
        zext_ln544_4_reg_1655[3] <= 1'b0;
        zext_ln544_4_reg_1655[4] <= 1'b0;
        zext_ln544_4_reg_1655[5] <= 1'b0;
        zext_ln544_4_reg_1655[6] <= 1'b0;
        zext_ln544_4_reg_1655[7] <= 1'b0;
    end else begin
        if (((copy1_state_load_load_fu_766_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0))) begin
                        zext_ln544_4_reg_1655[7 : 0] <= zext_ln544_4_fu_781_p1[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln544_5_reg_1641[0] <= 1'b0;
        zext_ln544_5_reg_1641[1] <= 1'b0;
        zext_ln544_5_reg_1641[2] <= 1'b0;
        zext_ln544_5_reg_1641[3] <= 1'b0;
        zext_ln544_5_reg_1641[4] <= 1'b0;
        zext_ln544_5_reg_1641[5] <= 1'b0;
        zext_ln544_5_reg_1641[6] <= 1'b0;
        zext_ln544_5_reg_1641[7] <= 1'b0;
    end else begin
        if (((copy1_state_load_load_fu_766_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0))) begin
                        zext_ln544_5_reg_1641[7 : 0] <= zext_ln544_5_fu_770_p1[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln544_reg_1669[0] <= 1'b0;
        zext_ln544_reg_1669[1] <= 1'b0;
        zext_ln544_reg_1669[2] <= 1'b0;
        zext_ln544_reg_1669[3] <= 1'b0;
        zext_ln544_reg_1669[4] <= 1'b0;
        zext_ln544_reg_1669[5] <= 1'b0;
        zext_ln544_reg_1669[6] <= 1'b0;
        zext_ln544_reg_1669[7] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        zext_ln544_reg_1669[7 : 0] <= zext_ln544_fu_798_p1[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln703_2_reg_1508[0] <= 1'b0;
        zext_ln703_2_reg_1508[1] <= 1'b0;
        zext_ln703_2_reg_1508[2] <= 1'b0;
        zext_ln703_2_reg_1508[3] <= 1'b0;
        zext_ln703_2_reg_1508[4] <= 1'b0;
        zext_ln703_2_reg_1508[5] <= 1'b0;
        zext_ln703_2_reg_1508[6] <= 1'b0;
        zext_ln703_2_reg_1508[7] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                        zext_ln703_2_reg_1508[7 : 0] <= zext_ln703_2_fu_561_p1[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln703_reg_1496[0] <= 1'b0;
        zext_ln703_reg_1496[1] <= 1'b0;
        zext_ln703_reg_1496[2] <= 1'b0;
        zext_ln703_reg_1496[3] <= 1'b0;
        zext_ln703_reg_1496[4] <= 1'b0;
        zext_ln703_reg_1496[5] <= 1'b0;
        zext_ln703_reg_1496[6] <= 1'b0;
        zext_ln703_reg_1496[7] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        zext_ln703_reg_1496[7 : 0] <= zext_ln703_fu_553_p1[7 : 0];
        end
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        copy1_empty_data_V_address0 = zext_ln544_reg_1669;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        copy1_empty_data_V_address0 = zext_ln544_5_reg_1641;
    end else begin
        copy1_empty_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        copy1_empty_data_V_ce0 = 1'b1;
    end else begin
        copy1_empty_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((copy1_state_load_reg_1637 == 2'd3) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (copy_select_V_reg_1587 == 1'd0))) begin
        copy1_empty_data_V_we0 = 1'b1;
    end else begin
        copy1_empty_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            copy1_histogram_V_address0 = copy1_histogram_V_addr_reg_1674;
        end else if ((1'b1 == ap_condition_1533)) begin
            copy1_histogram_V_address0 = zext_ln544_fu_798_p1;
        end else if ((1'b1 == ap_condition_1530)) begin
            copy1_histogram_V_address0 = zext_ln544_4_fu_781_p1;
        end else begin
            copy1_histogram_V_address0 = 'bx;
        end
    end else begin
        copy1_histogram_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((copy1_state_load_load_fu_766_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0)))) begin
        copy1_histogram_V_ce0 = 1'b1;
    end else begin
        copy1_histogram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            copy1_histogram_V_d0 = add_ln700_3_fu_859_p2;
        end else if ((1'b1 == ap_condition_1530)) begin
            copy1_histogram_V_d0 = 22'd0;
        end else begin
            copy1_histogram_V_d0 = 'bx;
        end
    end else begin
        copy1_histogram_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((copy1_state_load_load_fu_766_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0)))) begin
        copy1_histogram_V_we0 = 1'b1;
    end else begin
        copy1_histogram_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        copy2_empty_data_V_address0 = zext_ln544_1_reg_1627;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        copy2_empty_data_V_address0 = zext_ln544_3_reg_1683;
    end else begin
        copy2_empty_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        copy2_empty_data_V_ce0 = 1'b1;
    end else begin
        copy2_empty_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((copy2_state_load_reg_1679 == 2'd3) & (1'b0 == ap_block_pp0_stage1_11001) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        copy2_empty_data_V_we0 = 1'b1;
    end else begin
        copy2_empty_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            copy2_histogram_V_address0 = copy2_histogram_V_addr_reg_1632;
        end else if ((1'b1 == ap_condition_1547)) begin
            copy2_histogram_V_address0 = zext_ln544_2_fu_818_p1;
        end else if ((1'b1 == ap_condition_1529)) begin
            copy2_histogram_V_address0 = zext_ln544_1_fu_761_p1;
        end else begin
            copy2_histogram_V_address0 = 'bx;
        end
    end else begin
        copy2_histogram_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((copy2_state_load_load_fu_803_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0)))) begin
        copy2_histogram_V_ce0 = 1'b1;
    end else begin
        copy2_histogram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            copy2_histogram_V_d0 = add_ln700_6_fu_835_p2;
        end else if ((1'b1 == ap_condition_1547)) begin
            copy2_histogram_V_d0 = 22'd0;
        end else begin
            copy2_histogram_V_d0 = 'bx;
        end
    end else begin
        copy2_histogram_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (copy_select_V_reg_1587 == 1'd0)) | ((copy2_state_load_load_fu_803_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        copy2_histogram_V_we0 = 1'b1;
    end else begin
        copy2_histogram_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((frames_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (frames_V_1_vld_reg == 1'b1)))) begin
        frames_V_1_ack_in = 1'b1;
    end else begin
        frames_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        frames_V_1_vld_in = 1'b1;
    end else begin
        frames_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1414_ce = 1'b1;
    end else begin
        grp_fu_1414_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1420_ce = 1'b1;
    end else begin
        grp_fu_1420_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1428_ce = 1'b1;
    end else begin
        grp_fu_1428_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1436_ce = 1'b1;
    end else begin
        grp_fu_1436_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1444_ce = 1'b1;
    end else begin
        grp_fu_1444_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1453_ce = 1'b1;
    end else begin
        grp_fu_1453_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1462_ce = 1'b1;
    end else begin
        grp_fu_1462_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_629_ce = 1'b1;
    end else begin
        grp_fu_629_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_635_ce = 1'b1;
    end else begin
        grp_fu_635_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_701_ce = 1'b1;
    end else begin
        grp_fu_701_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_707_ce = 1'b1;
    end else begin
        grp_fu_707_ce = 1'b0;
    end
end

always @ (*) begin
    if (((pixels_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (pixels_V_1_vld_reg == 1'b1)))) begin
        pixels_V_1_ack_in = 1'b1;
    end else begin
        pixels_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pixels_V_1_vld_in = 1'b1;
    end else begin
        pixels_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((read_done_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (read_done_V_1_vld_reg == 1'b1)))) begin
        read_done_V_1_ack_in = 1'b1;
    end else begin
        read_done_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_01001) & (copy2_state_load_reg_1679 == 2'd1) & (icmp_ln879_1_reg_1707 == 1'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_01001) & (copy1_state_load_reg_1637 == 2'd1) & (icmp_ln879_3_reg_1665 == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0)))) begin
        read_done_V_1_data_in = 1'd1;
    end else if ((((1'b0 == ap_block_pp0_stage1_01001) & (copy2_state_load_reg_1679 == 2'd2) & (write_ready_V_read_reg_1623 == 1'd1) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_01001) & (start_V_reg_1611 == 1'd1) & (copy_select_V_reg_1587 == 1'd1) & (copy2_state_load_reg_1679 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_01001) & (copy1_state_load_reg_1637 == 2'd2) & (write_ready_V_read_reg_1623 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (copy_select_V_reg_1587 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_01001) & (start_V_reg_1611 == 1'd1) & (copy1_state_load_reg_1637 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (copy_select_V_reg_1587 == 1'd0)))) begin
        read_done_V_1_data_in = 1'd0;
    end else begin
        read_done_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((((copy2_state_load_reg_1679 == 2'd2) & (1'b0 == ap_block_pp0_stage1_11001) & (write_ready_V_read_reg_1623 == 1'd1) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (start_V_reg_1611 == 1'd1) & (copy_select_V_reg_1587 == 1'd1) & (copy2_state_load_reg_1679 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((copy1_state_load_reg_1637 == 2'd2) & (1'b0 == ap_block_pp0_stage1_11001) & (write_ready_V_read_reg_1623 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (copy_select_V_reg_1587 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (start_V_reg_1611 == 1'd1) & (copy1_state_load_reg_1637 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (copy_select_V_reg_1587 == 1'd0)) | ((copy2_state_load_reg_1679 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_reg_1707 == 1'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((copy1_state_load_reg_1637 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_3_reg_1665 == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0)))) begin
        read_done_V_1_vld_in = 1'b1;
    end else begin
        read_done_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((rows_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (rows_V_1_vld_reg == 1'b1)))) begin
        rows_V_1_ack_in = 1'b1;
    end else begin
        rows_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        rows_V_1_vld_in = 1'b1;
    end else begin
        rows_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if ((1'b1 == ap_condition_1563)) begin
            shared_memory_V_address0 = zext_ln544_2_reg_1697;
        end else if ((1'b1 == ap_condition_1559)) begin
            shared_memory_V_address0 = zext_ln544_4_reg_1655;
        end else if ((1'b1 == ap_condition_1555)) begin
            shared_memory_V_address0 = zext_ln544_3_fu_807_p1;
        end else if ((1'b1 == ap_condition_1552)) begin
            shared_memory_V_address0 = zext_ln544_5_fu_770_p1;
        end else begin
            shared_memory_V_address0 = 'bx;
        end
    end else begin
        shared_memory_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((copy2_state_load_reg_1679 == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((copy1_state_load_reg_1637 == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (copy_select_V_reg_1587 == 1'd0)) | ((copy2_state_load_load_fu_803_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (copy_select_V_reg_1587 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((copy1_state_load_load_fu_766_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0)))) begin
        shared_memory_V_ce0 = 1'b1;
    end else begin
        shared_memory_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_680)) begin
        if (((copy2_state_load_reg_1679 == 2'd1) & (copy_select_V_reg_1587 == 1'd1))) begin
            shared_memory_V_d0 = zext_ln209_fu_872_p1;
        end else if (((copy1_state_load_reg_1637 == 2'd1) & (copy_select_V_reg_1587 == 1'd0))) begin
            shared_memory_V_d0 = zext_ln209_1_fu_848_p1;
        end else begin
            shared_memory_V_d0 = 'bx;
        end
    end else begin
        shared_memory_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((copy2_state_load_reg_1679 == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((copy1_state_load_reg_1637 == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (copy_select_V_reg_1587 == 1'd0)))) begin
        shared_memory_V_we0 = 1'b1;
    end else begin
        shared_memory_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((sum_after_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (sum_after_V_1_vld_reg == 1'b1)))) begin
        sum_after_V_1_ack_in = 1'b1;
    end else begin
        sum_after_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_873)) begin
        if (((copy2_state_load_reg_1679_pp0_iter4_reg == 2'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1))) begin
            sum_after_V_1_data_in = copy2_sum_after_V;
        end else if (((copy1_state_load_reg_1637_pp0_iter4_reg == 2'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0))) begin
            sum_after_V_1_data_in = copy1_sum_after_V;
        end else begin
            sum_after_V_1_data_in = 'bx;
        end
    end else begin
        sum_after_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((((copy2_state_load_reg_1679_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((copy1_state_load_reg_1637_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0)))) begin
        sum_after_V_1_vld_in = 1'b1;
    end else begin
        sum_after_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((sum_before_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (sum_before_V_1_vld_reg == 1'b1)))) begin
        sum_before_V_1_ack_in = 1'b1;
    end else begin
        sum_before_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_873)) begin
        if (((copy2_state_load_reg_1679_pp0_iter4_reg == 2'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1))) begin
            sum_before_V_1_data_in = copy2_sum_before_V;
        end else if (((copy1_state_load_reg_1637_pp0_iter4_reg == 2'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0))) begin
            sum_before_V_1_data_in = copy1_sum_before_V;
        end else begin
            sum_before_V_1_data_in = 'bx;
        end
    end else begin
        sum_before_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((((copy2_state_load_reg_1679_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((copy1_state_load_reg_1637_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0)))) begin
        sum_before_V_1_vld_in = 1'b1;
    end else begin
        sum_before_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((values_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (values_V_1_vld_reg == 1'b1)))) begin
        values_V_1_ack_in = 1'b1;
    end else begin
        values_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_873)) begin
        if (((copy2_state_load_reg_1679_pp0_iter4_reg == 2'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1))) begin
            values_V_1_data_in = copy2_values_V;
        end else if (((copy1_state_load_reg_1637_pp0_iter4_reg == 2'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0))) begin
            values_V_1_data_in = copy1_values_V;
        end else begin
            values_V_1_data_in = 'bx;
        end
    end else begin
        values_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((((copy2_state_load_reg_1679_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((copy1_state_load_reg_1637_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0)))) begin
        values_V_1_vld_in = 1'b1;
    end else begin
        values_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        video_in_TDATA_blk_n = video_in_TVALID_int;
    end else begin
        video_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_video_in_data_U_ack_in == 1'b1) & (video_in_TVALID == 1'b1))) begin
        video_in_TREADY = 1'b1;
    end else begin
        video_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        video_in_TREADY_int = 1'b1;
    end else begin
        video_in_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        video_out_TDATA_blk_n = video_out_TREADY_int;
    end else begin
        video_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        video_out_TVALID_int = 1'b1;
    end else begin
        video_out_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (eol_V_reg_1476 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        write_ready_V_0_ack_out = 1'b1;
    end else begin
        write_ready_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_V_fu_529_p1 = video_in_TDATA_int[7:0];

assign B_fixed_V_1_fu_1139_p3 = ((icmp_ln1494_reg_1778[0:0] === 1'b1) ? 29'd133693440 : B_fixed_V_reg_1773);

assign B_fixed_V_3_fu_1157_p3 = ((tmp_4_fu_1149_p3[0:0] === 1'b1) ? 27'd0 : trunc_ln200_fu_1145_p1);

assign B_fixed_V_fu_1062_p4 = {{ret_V_fu_1056_p2[47:19]}};

assign G_fixed_V_1_fu_1170_p3 = ((icmp_ln1494_1_fu_1165_p2[0:0] === 1'b1) ? 29'd133693440 : G_fixed_V_reg_1783);

assign G_fixed_V_3_fu_1189_p3 = ((tmp_5_fu_1181_p3[0:0] === 1'b1) ? 27'd0 : trunc_ln203_fu_1177_p1);

assign R_V_fu_543_p4 = {{video_in_TDATA_int[23:16]}};

assign R_fixed_V_1_fu_1202_p3 = ((icmp_ln1494_2_fu_1197_p2[0:0] === 1'b1) ? 29'd133693440 : R_fixed_V_reg_1789);

assign R_fixed_V_3_fu_1221_p3 = ((tmp_6_fu_1213_p3[0:0] === 1'b1) ? 27'd0 : trunc_ln206_fu_1209_p1);

assign add_ln700_10_fu_994_p2 = (copy2_sum_after_V + zext_ln700_3_fu_991_p1);

assign add_ln700_1_fu_606_p2 = (row_counter_V + 32'd1);

assign add_ln700_2_fu_645_p2 = (32'd1 + pixel_counter_V);

assign add_ln700_3_fu_859_p2 = (22'd1 + copy1_histogram_V_q0);

assign add_ln700_4_fu_1006_p2 = (32'd1 + copy1_values_V);

assign add_ln700_5_fu_934_p2 = (copy1_sum_before_V + zext_ln700_fu_931_p1);

assign add_ln700_6_fu_835_p2 = (22'd1 + copy2_histogram_V_q0);

assign add_ln700_7_fu_979_p2 = (32'd1 + copy2_values_V);

assign add_ln700_8_fu_886_p2 = (copy2_sum_before_V + zext_ln700_1_fu_883_p1);

assign add_ln700_9_fu_1021_p2 = (copy1_sum_after_V + zext_ln700_2_fu_1018_p1);

assign add_ln700_fu_590_p2 = (frame_counter_V + 32'd1);

assign and_ln415_1_fu_1271_p2 = (tmp_8_fu_1263_p3 & or_ln412_1_fu_1257_p2);

assign and_ln415_2_fu_1329_p2 = (tmp_10_fu_1321_p3 & or_ln412_2_fu_1315_p2);

assign and_ln415_3_fu_1387_p2 = (tmp_12_fu_1379_p3 & or_ln412_3_fu_1373_p2);

assign and_ln415_fu_745_p2 = (tmp_3_fu_738_p3 & or_ln412_fu_733_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((video_in_TVALID_int == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((video_out_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((video_in_TVALID_int == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((video_out_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((video_in_TVALID_int == 1'b0) & (1'b1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter6 == 1'b1) & ((pixels_V_1_ack_in == 1'b0) | (rows_V_1_ack_in == 1'b0) | (frames_V_1_ack_in == 1'b0) | (read_done_V_1_ack_in == 1'b0) | (values_V_1_ack_in == 1'b0) | (sum_after_V_1_ack_in == 1'b0) | (sum_before_V_1_ack_in == 1'b0) | (regslice_both_video_out_data_U_apdone_blk == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter6 == 1'b1) & ((pixels_V_1_ack_in == 1'b0) | (rows_V_1_ack_in == 1'b0) | (frames_V_1_ack_in == 1'b0) | (read_done_V_1_ack_in == 1'b0) | (values_V_1_ack_in == 1'b0) | (video_out_TREADY_int == 1'b0) | (sum_after_V_1_ack_in == 1'b0) | (sum_before_V_1_ack_in == 1'b0) | (regslice_both_video_out_data_U_apdone_blk == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter6 == 1'b1) & ((pixels_V_1_ack_in == 1'b0) | (rows_V_1_ack_in == 1'b0) | (frames_V_1_ack_in == 1'b0) | (read_done_V_1_ack_in == 1'b0) | (values_V_1_ack_in == 1'b0) | (video_out_TREADY_int == 1'b0) | (sum_after_V_1_ack_in == 1'b0) | (sum_before_V_1_ack_in == 1'b0) | (regslice_both_video_out_data_U_apdone_blk == 1'b1)));
end

assign ap_block_state10_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (video_in_TVALID_int == 1'b0);
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage1_iter6 = ((pixels_V_1_ack_in == 1'b0) | (rows_V_1_ack_in == 1'b0) | (frames_V_1_ack_in == 1'b0) | (read_done_V_1_ack_in == 1'b0) | (values_V_1_ack_in == 1'b0) | (sum_after_V_1_ack_in == 1'b0) | (sum_before_V_1_ack_in == 1'b0) | (regslice_both_video_out_data_U_apdone_blk == 1'b1));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1529 = ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0));
end

always @ (*) begin
    ap_condition_1530 = ((copy1_state_load_load_fu_766_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0));
end

always @ (*) begin
    ap_condition_1533 = ((1'b0 == ap_block_pp0_stage0) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_1547 = ((copy2_state_load_load_fu_803_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_1552 = ((copy1_state_load_load_fu_766_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (copy_select_V_reg_1587 == 1'd0));
end

always @ (*) begin
    ap_condition_1555 = ((copy2_state_load_load_fu_803_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_1559 = ((copy1_state_load_reg_1637 == 2'd1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (copy_select_V_reg_1587 == 1'd0));
end

always @ (*) begin
    ap_condition_1563 = ((copy2_state_load_reg_1679 == 2'd1) & (1'b0 == ap_block_pp0_stage1) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_369 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_680 = ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_738 = ((copy1_state_load_reg_1637_pp0_iter4_reg == 2'd1) & (icmp_ln879_3_reg_1665_pp0_iter4_reg == 1'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_condition_811 = ((copy2_state_load_reg_1679_pp0_iter4_reg == 2'd1) & (icmp_ln879_1_reg_1707_pp0_iter4_reg == 1'd1) & (copy_select_V_reg_1587_pp0_iter3_reg == 1'd1));
end

always @ (*) begin
    ap_condition_873 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_882 = ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (copy_select_V_reg_1587 == 1'd0));
end

always @ (*) begin
    ap_condition_896 = ((1'b0 == ap_block_pp0_stage1_11001) & (copy_select_V_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_V_reg_438 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign copy1_state_load_load_fu_766_p1 = copy1_state;

assign copy2_state_load_load_fu_803_p1 = copy2_state;

assign copy_select_V_fu_668_p3 = frame_counter_V[32'd2];

assign grp_fu_1414_p0 = 26'd156762;

assign grp_fu_1414_p1 = zext_ln703_3_fu_557_p1;

assign grp_fu_1420_p0 = 25'd33511801;

assign grp_fu_1420_p1 = grp_fu_1420_p10;

assign grp_fu_1420_p10 = B_V_fu_529_p1;

assign grp_fu_1420_p2 = grp_fu_1420_p20;

assign grp_fu_1420_p20 = shl_ln_fu_564_p3;

assign grp_fu_1428_p0 = 26'd67020397;

assign grp_fu_1428_p1 = zext_ln703_3_fu_557_p1;

assign grp_fu_1428_p2 = grp_fu_1428_p20;

assign grp_fu_1428_p20 = shl_ln703_1_fu_575_p3;

assign grp_fu_1436_p0 = 25'd59768;

assign grp_fu_1436_p1 = zext_ln703_reg_1496;

assign grp_fu_1444_p0 = 27'd133998214;

assign grp_fu_1444_p1 = zext_ln703_2_fu_561_p1;

assign grp_fu_1453_p0 = 27'd134044050;

assign grp_fu_1453_p1 = zext_ln703_2_fu_561_p1;

assign grp_fu_1462_p0 = 27'd307757;

assign grp_fu_1462_p1 = zext_ln703_2_reg_1508;

assign grp_fu_1462_p2 = grp_fu_1462_p20;

assign grp_fu_1462_p20 = grp_fu_1436_p3;

assign grp_fu_463_p2 = ((address_counter_V == 8'd255) ? 1'b1 : 1'b0);

assign grp_fu_469_p2 = (address_counter_V + 8'd1);

assign grp_fu_629_p0 = 48'd929038;

assign grp_fu_635_p0 = 47'd140737487980915;

assign grp_fu_701_p0 = 46'd70368743997237;

assign grp_fu_707_p0 = 48'd735051;

assign grp_read_fu_247_p2 = write_ready_V_0_data_reg;

assign icmp_ln1494_1_fu_1165_p2 = (($signed(G_fixed_V_reg_1783) > $signed(29'd133693440)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_1197_p2 = (($signed(R_fixed_V_reg_1789) > $signed(29'd133693440)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_1072_p2 = (($signed(B_fixed_V_fu_1062_p4) > $signed(29'd133693440)) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_680_p2 = ((trunc_ln647_fu_676_p1 == 2'd0) ? 1'b1 : 1'b0);

assign lhs_V_fu_1033_p3 = {{ap_phi_reg_pp0_iter5_tmp_V_reg_438}, {38'd0}};

assign newY_V_1_fu_954_p3 = ((copy1_empty_data_ready_V[0:0] === 1'b1) ? newY_V_fu_950_p1 : newY_V_4_reg_1615_pp0_iter4_reg);

assign newY_V_2_fu_902_p1 = copy2_empty_data_V_q0[7:0];

assign newY_V_3_fu_906_p3 = ((copy2_empty_data_ready_V[0:0] === 1'b1) ? newY_V_2_fu_902_p1 : newY_V_4_reg_1615_pp0_iter4_reg);

assign newY_V_4_fu_755_p2 = (zext_ln415_fu_751_p1 + p_Val2_6_fu_717_p4);

assign newY_V_fu_950_p1 = copy1_empty_data_V_q0[7:0];

assign or_ln412_1_fu_1257_p2 = (tmp_7_fu_1239_p3 | r_1_fu_1251_p2);

assign or_ln412_2_fu_1315_p2 = (tmp_9_fu_1297_p3 | r_2_fu_1309_p2);

assign or_ln412_3_fu_1373_p2 = (tmp_11_fu_1355_p3 | r_3_fu_1367_p2);

assign or_ln412_fu_733_p2 = (tmp_2_fu_726_p3 | r_reg_1596);

assign p_Val2_20_fu_1229_p4 = {{B_fixed_V_3_fu_1157_p3[26:19]}};

assign p_Val2_21_fu_1287_p4 = {{G_fixed_V_3_fu_1189_p3[26:19]}};

assign p_Val2_24_fu_1345_p4 = {{R_fixed_V_3_fu_1221_p3[26:19]}};

assign p_Val2_26_fu_1339_p2 = (p_Val2_21_fu_1287_p4 + zext_ln415_2_fu_1335_p1);

assign p_Val2_27_fu_1397_p2 = (p_Val2_24_fu_1345_p4 + zext_ln415_3_fu_1393_p1);

assign p_Val2_6_fu_717_p4 = {{Y_V_reg_1580[26:19]}};

assign p_Val2_s_fu_1281_p2 = (p_Val2_20_fu_1229_p4 + zext_ln415_1_fu_1277_p1);

assign r_1_fu_1251_p2 = ((trunc_ln718_1_fu_1247_p1 != 18'd0) ? 1'b1 : 1'b0);

assign r_2_fu_1309_p2 = ((trunc_ln718_2_fu_1305_p1 != 18'd0) ? 1'b1 : 1'b0);

assign r_3_fu_1367_p2 = ((trunc_ln718_3_fu_1363_p1 != 18'd0) ? 1'b1 : 1'b0);

assign r_fu_689_p2 = ((trunc_ln718_fu_686_p1 != 18'd0) ? 1'b1 : 1'b0);

assign ret_V_10_fu_1099_p2 = (ret_V_9_fu_1085_p2 + zext_ln1192_1_fu_1095_p1);

assign ret_V_11_fu_1123_p2 = (zext_ln728_1_fu_1045_p1 + zext_ln1192_2_fu_1119_p1);

assign ret_V_9_fu_1085_p2 = (zext_ln728_fu_1041_p1 + zext_ln703_5_fu_1081_p1);

assign ret_V_fu_1056_p2 = (zext_ln728_1_fu_1045_p1 + zext_ln1192_fu_1052_p1);

assign sext_ln1118_2_fu_1078_p1 = $signed(r_V_1_reg_1768);

assign sext_ln1118_3_fu_1049_p1 = $signed(r_V_reg_1763);

assign sext_ln1118_4_fu_1091_p1 = $signed(grp_fu_701_p2);

assign sext_ln1118_5_fu_1115_p1 = $signed(grp_fu_707_p2);

assign shl_ln703_1_fu_575_p3 = {{B_V_reg_1481}, {18'd0}};

assign shl_ln_fu_564_p3 = {{R_V_reg_1491}, {18'd0}};

assign start_V_fu_713_p2 = (sof_V_reg_1470_pp0_iter2_reg & icmp_ln879_reg_1591);

assign tmp_10_fu_1321_p3 = G_fixed_V_3_fu_1189_p3[32'd18];

assign tmp_11_fu_1355_p3 = R_fixed_V_3_fu_1221_p3[32'd19];

assign tmp_12_fu_1379_p3 = R_fixed_V_3_fu_1221_p3[32'd18];

assign tmp_2_fu_726_p3 = Y_V_reg_1580[32'd19];

assign tmp_3_fu_738_p3 = Y_V_reg_1580[32'd18];

assign tmp_4_fu_1149_p3 = B_fixed_V_1_fu_1139_p3[32'd28];

assign tmp_5_fu_1181_p3 = G_fixed_V_1_fu_1170_p3[32'd28];

assign tmp_6_fu_1213_p3 = R_fixed_V_1_fu_1202_p3[32'd28];

assign tmp_7_fu_1239_p3 = B_fixed_V_3_fu_1157_p3[32'd19];

assign tmp_8_fu_1263_p3 = B_fixed_V_3_fu_1157_p3[32'd18];

assign tmp_9_fu_1297_p3 = G_fixed_V_3_fu_1189_p3[32'd19];

assign trunc_ln200_fu_1145_p1 = B_fixed_V_1_fu_1139_p3[26:0];

assign trunc_ln203_fu_1177_p1 = G_fixed_V_1_fu_1170_p3[26:0];

assign trunc_ln206_fu_1209_p1 = R_fixed_V_1_fu_1202_p3[26:0];

assign trunc_ln647_fu_676_p1 = frame_counter_V[1:0];

assign trunc_ln718_1_fu_1247_p1 = B_fixed_V_3_fu_1157_p3[17:0];

assign trunc_ln718_2_fu_1305_p1 = G_fixed_V_3_fu_1189_p3[17:0];

assign trunc_ln718_3_fu_1363_p1 = R_fixed_V_3_fu_1221_p3[17:0];

assign trunc_ln718_fu_686_p1 = grp_fu_1462_p3[17:0];

assign video_out_TDATA_int = {{{p_Val2_27_fu_1397_p2}, {p_Val2_26_fu_1339_p2}}, {p_Val2_s_fu_1281_p2}};

assign video_out_TVALID = regslice_both_video_out_data_U_vld_out;

assign zext_ln1192_1_fu_1095_p1 = $unsigned(sext_ln1118_4_fu_1091_p1);

assign zext_ln1192_2_fu_1119_p1 = $unsigned(sext_ln1118_5_fu_1115_p1);

assign zext_ln1192_fu_1052_p1 = $unsigned(sext_ln1118_3_fu_1049_p1);

assign zext_ln209_1_fu_848_p1 = copy1_histogram_V_q0;

assign zext_ln209_fu_872_p1 = copy2_histogram_V_q0;

assign zext_ln415_1_fu_1277_p1 = and_ln415_1_fu_1271_p2;

assign zext_ln415_2_fu_1335_p1 = and_ln415_2_fu_1329_p2;

assign zext_ln415_3_fu_1393_p1 = and_ln415_3_fu_1387_p2;

assign zext_ln415_fu_751_p1 = and_ln415_fu_745_p2;

assign zext_ln544_1_fu_761_p1 = newY_V_4_fu_755_p2;

assign zext_ln544_2_fu_818_p1 = address_counter_V;

assign zext_ln544_3_fu_807_p1 = address_counter_V;

assign zext_ln544_4_fu_781_p1 = address_counter_V;

assign zext_ln544_5_fu_770_p1 = address_counter_V;

assign zext_ln544_fu_798_p1 = newY_V_4_fu_755_p2;

assign zext_ln700_1_fu_883_p1 = newY_V_4_reg_1615_pp0_iter4_reg;

assign zext_ln700_2_fu_1018_p1 = newY_V_1_reg_1742;

assign zext_ln700_3_fu_991_p1 = newY_V_3_reg_1721;

assign zext_ln700_fu_931_p1 = newY_V_4_reg_1615_pp0_iter4_reg;

assign zext_ln703_2_fu_561_p1 = G_V_reg_1486;

assign zext_ln703_3_fu_557_p1 = R_V_fu_543_p4;

assign zext_ln703_5_fu_1081_p1 = $unsigned(sext_ln1118_2_fu_1078_p1);

assign zext_ln703_fu_553_p1 = B_V_fu_529_p1;

assign zext_ln728_1_fu_1045_p1 = lhs_V_fu_1033_p3;

assign zext_ln728_fu_1041_p1 = lhs_V_fu_1033_p3;

always @ (posedge ap_clk) begin
    write_ready_V_0_vld_reg <= 1'b0;
    zext_ln703_reg_1496[24:8] <= 17'b00000000000000000;
    zext_ln703_2_reg_1508[26:8] <= 19'b0000000000000000000;
    zext_ln544_1_reg_1627[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln544_5_reg_1641[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln544_4_reg_1655[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln544_reg_1669[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln544_3_reg_1683[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln544_2_reg_1697[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //pixel_proc
