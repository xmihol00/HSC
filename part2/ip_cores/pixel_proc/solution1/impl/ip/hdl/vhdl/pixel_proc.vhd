-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pixel_proc is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 11;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    video_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    video_in_TVALID : IN STD_LOGIC;
    video_in_TREADY : OUT STD_LOGIC;
    video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    video_out_TVALID : OUT STD_LOGIC;
    video_out_TREADY : IN STD_LOGIC;
    video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of pixel_proc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pixel_proc,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.763125,HLS_SYN_LAT=2571,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=15,HLS_SYN_FF=3369,HLS_SYN_LUT=3493,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv48_E2D0E : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000011100010110100001110";
    constant ap_const_lv47_7FFFFFFA4973 : STD_LOGIC_VECTOR (46 downto 0) := "11111111111111111111111111110100100100101110011";
    constant ap_const_lv46_3FFFFFFD3F35 : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111111111111111010011111100110101";
    constant ap_const_lv48_B374B : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010110011011101001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv29_7F80000 : STD_LOGIC_VECTOR (28 downto 0) := "00111111110000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv26_2645A : STD_LOGIC_VECTOR (25 downto 0) := "00000000100110010001011010";
    constant ap_const_lv25_1FF5979 : STD_LOGIC_VECTOR (24 downto 0) := "1111111110101100101111001";
    constant ap_const_lv26_3FEA66D : STD_LOGIC_VECTOR (25 downto 0) := "11111111101010011001101101";
    constant ap_const_lv25_E978 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001110100101111000";
    constant ap_const_lv27_7FCA686 : STD_LOGIC_VECTOR (26 downto 0) := "111111111001010011010000110";
    constant ap_const_lv27_7FD5992 : STD_LOGIC_VECTOR (26 downto 0) := "111111111010101100110010010";
    constant ap_const_lv27_4B22D : STD_LOGIC_VECTOR (26 downto 0) := "000000001001011001000101101";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv47_0 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal frames_V_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal frames_V_1_vld_reg : STD_LOGIC := '0';
    signal frames_V_1_vld_in : STD_LOGIC;
    signal frames_V_1_ack_in : STD_LOGIC;
    signal rows_V_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rows_V_1_vld_reg : STD_LOGIC := '0';
    signal rows_V_1_vld_in : STD_LOGIC;
    signal rows_V_1_ack_in : STD_LOGIC;
    signal pixels_V_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pixels_V_1_vld_reg : STD_LOGIC := '0';
    signal pixels_V_1_vld_in : STD_LOGIC;
    signal pixels_V_1_ack_in : STD_LOGIC;
    signal sum_before_V_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sum_before_V_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_before_V_1_vld_reg : STD_LOGIC := '0';
    signal sum_before_V_1_vld_in : STD_LOGIC;
    signal sum_before_V_1_ack_in : STD_LOGIC;
    signal sum_after_V_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sum_after_V_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_after_V_1_vld_reg : STD_LOGIC := '0';
    signal sum_after_V_1_vld_in : STD_LOGIC;
    signal sum_after_V_1_ack_in : STD_LOGIC;
    signal values_V_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal values_V_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal values_V_1_vld_reg : STD_LOGIC := '0';
    signal values_V_1_vld_in : STD_LOGIC;
    signal values_V_1_ack_in : STD_LOGIC;
    signal read_done_V_1_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal read_done_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal read_done_V_1_vld_reg : STD_LOGIC := '0';
    signal read_done_V_1_vld_in : STD_LOGIC;
    signal read_done_V_1_ack_in : STD_LOGIC;
    signal write_ready_V : STD_LOGIC_VECTOR (0 downto 0);
    signal write_ready_V_0_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal write_ready_V_0_vld_reg : STD_LOGIC := '0';
    signal write_ready_V_0_ack_out : STD_LOGIC;
    signal shared_memory_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal shared_memory_V_ce0 : STD_LOGIC;
    signal shared_memory_V_we0 : STD_LOGIC;
    signal shared_memory_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shared_memory_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_counter_V : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    signal row_counter_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pixel_counter_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal copy1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal copy1_histogram_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal copy1_histogram_V_ce0 : STD_LOGIC;
    signal copy1_histogram_V_we0 : STD_LOGIC;
    signal copy1_histogram_V_d0 : STD_LOGIC_VECTOR (21 downto 0);
    signal copy1_histogram_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal copy1_values_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal copy1_sum_before_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal copy1_empty_data_ready_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal copy1_empty_data_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal copy1_empty_data_V_ce0 : STD_LOGIC;
    signal copy1_empty_data_V_we0 : STD_LOGIC;
    signal copy1_empty_data_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal copy1_sum_after_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal copy2_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal address_counter_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal copy2_empty_data_ready_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal copy2_sum_before_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal copy2_sum_after_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal copy2_values_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal copy2_histogram_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal copy2_histogram_V_ce0 : STD_LOGIC;
    signal copy2_histogram_V_we0 : STD_LOGIC;
    signal copy2_histogram_V_d0 : STD_LOGIC_VECTOR (21 downto 0);
    signal copy2_histogram_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal copy2_empty_data_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal copy2_empty_data_V_ce0 : STD_LOGIC;
    signal copy2_empty_data_V_we0 : STD_LOGIC;
    signal copy2_empty_data_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_V_reg_1476 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal eol_V_reg_1476_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter6 : BOOLEAN;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal eol_V_reg_1476_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter5 : BOOLEAN;
    signal regslice_both_video_out_data_U_apdone_blk : STD_LOGIC;
    signal ap_block_state6_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal video_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal video_out_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sof_V_reg_1470 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal sof_V_reg_1470_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal sof_V_reg_1470_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal sof_V_reg_1470_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal sof_V_reg_1470_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal sof_V_reg_1470_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal eol_V_reg_1476_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal eol_V_reg_1476_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal eol_V_reg_1476_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal B_V_fu_529_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_V_reg_1481 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal G_V_reg_1486 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal R_V_fu_543_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_V_reg_1491 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal zext_ln703_fu_553_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln703_reg_1496 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal zext_ln703_3_fu_557_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln703_2_fu_561_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln703_2_reg_1508 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    signal grp_fu_1414_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1420_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_1428_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1444_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal Cr_V_reg_1545 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_fu_1453_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal Cb_V_reg_1550 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    signal add_ln700_2_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1462_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal Y_V_reg_1580 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    signal copy_select_V_fu_668_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_select_V_reg_1587 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal copy_select_V_reg_1587_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal copy_select_V_reg_1587_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal icmp_ln879_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_1591 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal r_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_1596 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal start_V_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_V_reg_1611 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal newY_V_4_fu_755_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal newY_V_4_reg_1615 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal newY_V_4_reg_1615_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal grp_read_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_ready_V_read_reg_1623 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal zext_ln544_1_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_reg_1627 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal copy2_histogram_V_addr_reg_1632 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal copy1_state_load_load_fu_766_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal copy1_state_load_reg_1637 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal copy1_state_load_reg_1637_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal zext_ln544_5_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_5_reg_1641 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal grp_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_4_reg_1651 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal zext_ln544_4_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_4_reg_1655 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal icmp_ln879_3_reg_1665 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal icmp_ln879_3_reg_1665_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal zext_ln544_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_reg_1669 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal copy1_histogram_V_addr_reg_1674 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal copy2_state_load_load_fu_803_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal copy2_state_load_reg_1679 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal copy2_state_load_reg_1679_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal zext_ln544_3_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_3_reg_1683 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal icmp_ln879_2_reg_1693 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal zext_ln544_2_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_reg_1697 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal icmp_ln879_1_reg_1707 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal icmp_ln879_1_reg_1707_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal newY_V_3_fu_906_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newY_V_3_reg_1721 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal newY_V_1_fu_954_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newY_V_1_reg_1742 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal grp_fu_629_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_reg_1763 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal grp_fu_635_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_1_reg_1768 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000000";
    signal B_fixed_V_fu_1062_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal B_fixed_V_reg_1773 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal icmp_ln1494_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_1778 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal G_fixed_V_reg_1783 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal R_fixed_V_reg_1789 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_phi_reg_pp0_iter0_tmp_V_reg_438 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_V_reg_438 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_phi_reg_pp0_iter2_tmp_V_reg_438 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_phi_reg_pp0_iter3_tmp_V_reg_438 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_phi_reg_pp0_iter4_tmp_V_reg_438 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_phi_reg_pp0_iter5_tmp_V_reg_438 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln700_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_1_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_4_fu_1006_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_5_fu_934_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_9_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_469_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_8_fu_886_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_10_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_7_fu_979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln700_6_fu_835_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln209_1_fu_848_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln209_fu_872_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_3_fu_859_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_fu_564_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln703_1_fu_575_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1436_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_629_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_635_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln647_fu_676_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln718_fu_686_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_701_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_707_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_fu_726_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_738_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_751_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_717_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln700_1_fu_883_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newY_V_2_fu_902_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln700_fu_931_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newY_V_fu_950_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln700_3_fu_991_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln700_2_fu_1018_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_1033_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln1118_3_fu_1049_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln728_1_fu_1045_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal zext_ln1192_fu_1052_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_fu_1056_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal sext_ln1118_2_fu_1078_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal zext_ln728_fu_1041_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal zext_ln703_5_fu_1081_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_701_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln1118_4_fu_1091_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_9_fu_1085_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal zext_ln1192_1_fu_1095_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal ret_V_10_fu_1099_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_707_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1118_5_fu_1115_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln1192_2_fu_1119_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_11_fu_1123_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal B_fixed_V_1_fu_1139_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_1149_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln199_fu_1145_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln1494_1_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal G_fixed_V_1_fu_1170_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_fu_1181_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln202_fu_1177_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln1494_2_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal R_fixed_V_1_fu_1202_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_fu_1213_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln205_fu_1209_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal B_fixed_V_3_fu_1157_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln718_1_fu_1247_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_1_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1239_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_1263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_1_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_1_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_20_fu_1229_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_1_fu_1277_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_fixed_V_3_fu_1189_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln718_2_fu_1305_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_2_fu_1309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1297_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_2_fu_1315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_2_fu_1329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_21_fu_1287_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_2_fu_1335_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_fixed_V_3_fu_1221_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln718_3_fu_1363_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_3_fu_1367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1355_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_1379_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_3_fu_1373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_3_fu_1387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_fu_1345_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_3_fu_1393_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_27_fu_1397_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_26_fu_1339_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_1281_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1414_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1420_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1420_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1420_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1428_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1428_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1428_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1436_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1436_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1444_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1453_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1453_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1462_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1462_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1462_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_629_ce : STD_LOGIC;
    signal grp_fu_635_ce : STD_LOGIC;
    signal grp_fu_701_ce : STD_LOGIC;
    signal grp_fu_707_ce : STD_LOGIC;
    signal grp_fu_1414_ce : STD_LOGIC;
    signal grp_fu_1420_ce : STD_LOGIC;
    signal grp_fu_1428_ce : STD_LOGIC;
    signal grp_fu_1436_ce : STD_LOGIC;
    signal grp_fu_1444_ce : STD_LOGIC;
    signal grp_fu_1453_ce : STD_LOGIC;
    signal grp_fu_1462_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_video_in_data_U_apdone_blk : STD_LOGIC;
    signal video_in_TDATA_int : STD_LOGIC_VECTOR (23 downto 0);
    signal video_in_TVALID_int : STD_LOGIC;
    signal video_in_TREADY_int : STD_LOGIC;
    signal regslice_both_video_in_data_U_ack_in : STD_LOGIC;
    signal regslice_both_video_in_user_V_U_apdone_blk : STD_LOGIC;
    signal video_in_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_video_in_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_video_in_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_video_in_last_V_U_apdone_blk : STD_LOGIC;
    signal video_in_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_video_in_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_video_in_last_V_U_ack_in : STD_LOGIC;
    signal video_out_TDATA_int : STD_LOGIC_VECTOR (23 downto 0);
    signal video_out_TVALID_int : STD_LOGIC;
    signal video_out_TREADY_int : STD_LOGIC;
    signal regslice_both_video_out_data_U_vld_out : STD_LOGIC;
    signal regslice_both_video_out_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_video_out_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_video_out_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_video_out_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_video_out_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_video_out_last_V_U_vld_out : STD_LOGIC;
    signal grp_fu_1420_p10 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_1420_p20 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1428_p20 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1462_p20 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_condition_882 : BOOLEAN;
    signal ap_condition_1530 : BOOLEAN;
    signal ap_condition_1533 : BOOLEAN;
    signal ap_condition_738 : BOOLEAN;
    signal ap_condition_369 : BOOLEAN;
    signal ap_condition_896 : BOOLEAN;
    signal ap_condition_1529 : BOOLEAN;
    signal ap_condition_1547 : BOOLEAN;
    signal ap_condition_811 : BOOLEAN;
    signal ap_condition_1552 : BOOLEAN;
    signal ap_condition_1555 : BOOLEAN;
    signal ap_condition_1559 : BOOLEAN;
    signal ap_condition_1563 : BOOLEAN;
    signal ap_condition_680 : BOOLEAN;
    signal ap_condition_873 : BOOLEAN;

    component pixel_proc_mul_21ns_27s_48_7_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component pixel_proc_mul_20s_27s_47_7_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component pixel_proc_mul_19s_27s_46_7_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component pixel_proc_mul_mul_19ns_8ns_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component pixel_proc_mac_muladd_17s_8ns_26s_27_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component pixel_proc_mac_muladd_18s_8ns_26ns_27cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component pixel_proc_mac_muladd_17ns_8ns_26ns_2dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component pixel_proc_mac_muladd_19s_8ns_27s_27_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component pixel_proc_mac_muladd_20ns_8ns_26ns_2fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component pixel_proc_copy1_histogram_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (21 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component pixel_proc_copy1_empty_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pixel_proc_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        frames_V : IN STD_LOGIC_VECTOR (31 downto 0);
        frames_V_ap_vld : IN STD_LOGIC;
        rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_V_ap_vld : IN STD_LOGIC;
        pixels_V : IN STD_LOGIC_VECTOR (31 downto 0);
        pixels_V_ap_vld : IN STD_LOGIC;
        sum_before_V : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_before_V_ap_vld : IN STD_LOGIC;
        sum_after_V : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_after_V_ap_vld : IN STD_LOGIC;
        values_V : IN STD_LOGIC_VECTOR (31 downto 0);
        values_V_ap_vld : IN STD_LOGIC;
        read_done_V : IN STD_LOGIC_VECTOR (0 downto 0);
        read_done_V_ap_vld : IN STD_LOGIC;
        write_ready_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        shared_memory_V_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        shared_memory_V_ce0 : IN STD_LOGIC;
        shared_memory_V_we0 : IN STD_LOGIC;
        shared_memory_V_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        shared_memory_V_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    copy1_histogram_V_U : component pixel_proc_copy1_histogram_V
    generic map (
        DataWidth => 22,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => copy1_histogram_V_address0,
        ce0 => copy1_histogram_V_ce0,
        we0 => copy1_histogram_V_we0,
        d0 => copy1_histogram_V_d0,
        q0 => copy1_histogram_V_q0);

    copy1_empty_data_V_U : component pixel_proc_copy1_empty_data_V
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => copy1_empty_data_V_address0,
        ce0 => copy1_empty_data_V_ce0,
        we0 => copy1_empty_data_V_we0,
        d0 => shared_memory_V_q0,
        q0 => copy1_empty_data_V_q0);

    copy2_histogram_V_U : component pixel_proc_copy1_histogram_V
    generic map (
        DataWidth => 22,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => copy2_histogram_V_address0,
        ce0 => copy2_histogram_V_ce0,
        we0 => copy2_histogram_V_we0,
        d0 => copy2_histogram_V_d0,
        q0 => copy2_histogram_V_q0);

    copy2_empty_data_V_U : component pixel_proc_copy1_empty_data_V
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => copy2_empty_data_V_address0,
        ce0 => copy2_empty_data_V_ce0,
        we0 => copy2_empty_data_V_we0,
        d0 => shared_memory_V_q0,
        q0 => copy2_empty_data_V_q0);

    pixel_proc_AXILiteS_s_axi_U : component pixel_proc_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        frames_V => frames_V_1_data_reg,
        frames_V_ap_vld => frames_V_1_vld_reg,
        rows_V => rows_V_1_data_reg,
        rows_V_ap_vld => rows_V_1_vld_reg,
        pixels_V => pixels_V_1_data_reg,
        pixels_V_ap_vld => pixels_V_1_vld_reg,
        sum_before_V => sum_before_V_1_data_reg,
        sum_before_V_ap_vld => sum_before_V_1_vld_reg,
        sum_after_V => sum_after_V_1_data_reg,
        sum_after_V_ap_vld => sum_after_V_1_vld_reg,
        values_V => values_V_1_data_reg,
        values_V_ap_vld => values_V_1_vld_reg,
        read_done_V => read_done_V_1_data_reg,
        read_done_V_ap_vld => read_done_V_1_vld_reg,
        write_ready_V => write_ready_V,
        shared_memory_V_address0 => shared_memory_V_address0,
        shared_memory_V_ce0 => shared_memory_V_ce0,
        shared_memory_V_we0 => shared_memory_V_we0,
        shared_memory_V_d0 => shared_memory_V_d0,
        shared_memory_V_q0 => shared_memory_V_q0);

    pixel_proc_mul_21ns_27s_48_7_1_U1 : component pixel_proc_mul_21ns_27s_48_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 21,
        din1_WIDTH => 27,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_629_p0,
        din1 => grp_fu_1453_p3,
        ce => grp_fu_629_ce,
        dout => grp_fu_629_p2);

    pixel_proc_mul_20s_27s_47_7_1_U2 : component pixel_proc_mul_20s_27s_47_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 20,
        din1_WIDTH => 27,
        dout_WIDTH => 47)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_635_p0,
        din1 => grp_fu_1444_p3,
        ce => grp_fu_635_ce,
        dout => grp_fu_635_p2);

    pixel_proc_mul_19s_27s_46_7_1_U3 : component pixel_proc_mul_19s_27s_46_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 19,
        din1_WIDTH => 27,
        dout_WIDTH => 46)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_701_p0,
        din1 => Cb_V_reg_1550,
        ce => grp_fu_701_ce,
        dout => grp_fu_701_p2);

    pixel_proc_mul_21ns_27s_48_7_1_U4 : component pixel_proc_mul_21ns_27s_48_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 21,
        din1_WIDTH => 27,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_707_p0,
        din1 => Cr_V_reg_1545,
        ce => grp_fu_707_ce,
        dout => grp_fu_707_p2);

    pixel_proc_mul_mul_19ns_8ns_26_4_1_U5 : component pixel_proc_mul_mul_19ns_8ns_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 19,
        din1_WIDTH => 8,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1414_p0,
        din1 => grp_fu_1414_p1,
        ce => grp_fu_1414_ce,
        dout => grp_fu_1414_p2);

    pixel_proc_mac_muladd_17s_8ns_26s_27_bkb_U6 : component pixel_proc_mac_muladd_17s_8ns_26s_27_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 8,
        din2_WIDTH => 26,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1420_p0,
        din1 => grp_fu_1420_p1,
        din2 => grp_fu_1420_p2,
        ce => grp_fu_1420_ce,
        dout => grp_fu_1420_p3);

    pixel_proc_mac_muladd_18s_8ns_26ns_27cud_U7 : component pixel_proc_mac_muladd_18s_8ns_26ns_27cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 8,
        din2_WIDTH => 26,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1428_p0,
        din1 => grp_fu_1428_p1,
        din2 => grp_fu_1428_p2,
        ce => grp_fu_1428_ce,
        dout => grp_fu_1428_p3);

    pixel_proc_mac_muladd_17ns_8ns_26ns_2dEe_U8 : component pixel_proc_mac_muladd_17ns_8ns_26ns_2dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 8,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1436_p0,
        din1 => grp_fu_1436_p1,
        din2 => grp_fu_1414_p2,
        ce => grp_fu_1436_ce,
        dout => grp_fu_1436_p3);

    pixel_proc_mac_muladd_19s_8ns_27s_27_eOg_U9 : component pixel_proc_mac_muladd_19s_8ns_27s_27_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 19,
        din1_WIDTH => 8,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1444_p0,
        din1 => grp_fu_1444_p1,
        din2 => grp_fu_1420_p3,
        ce => grp_fu_1444_ce,
        dout => grp_fu_1444_p3);

    pixel_proc_mac_muladd_19s_8ns_27s_27_eOg_U10 : component pixel_proc_mac_muladd_19s_8ns_27s_27_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 19,
        din1_WIDTH => 8,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1453_p0,
        din1 => grp_fu_1453_p1,
        din2 => grp_fu_1428_p3,
        ce => grp_fu_1453_ce,
        dout => grp_fu_1453_p3);

    pixel_proc_mac_muladd_20ns_8ns_26ns_2fYi_U11 : component pixel_proc_mac_muladd_20ns_8ns_26ns_2fYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 20,
        din1_WIDTH => 8,
        din2_WIDTH => 26,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1462_p0,
        din1 => grp_fu_1462_p1,
        din2 => grp_fu_1462_p2,
        ce => grp_fu_1462_ce,
        dout => grp_fu_1462_p3);

    regslice_both_video_in_data_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => video_in_TDATA,
        vld_in => video_in_TVALID,
        ack_in => regslice_both_video_in_data_U_ack_in,
        data_out => video_in_TDATA_int,
        vld_out => video_in_TVALID_int,
        ack_out => video_in_TREADY_int,
        apdone_blk => regslice_both_video_in_data_U_apdone_blk);

    regslice_both_video_in_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => video_in_TUSER,
        vld_in => video_in_TVALID,
        ack_in => regslice_both_video_in_user_V_U_ack_in,
        data_out => video_in_TUSER_int,
        vld_out => regslice_both_video_in_user_V_U_vld_out,
        ack_out => video_in_TREADY_int,
        apdone_blk => regslice_both_video_in_user_V_U_apdone_blk);

    regslice_both_video_in_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => video_in_TLAST,
        vld_in => video_in_TVALID,
        ack_in => regslice_both_video_in_last_V_U_ack_in,
        data_out => video_in_TLAST_int,
        vld_out => regslice_both_video_in_last_V_U_vld_out,
        ack_out => video_in_TREADY_int,
        apdone_blk => regslice_both_video_in_last_V_U_apdone_blk);

    regslice_both_video_out_data_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => video_out_TDATA_int,
        vld_in => video_out_TVALID_int,
        ack_in => video_out_TREADY_int,
        data_out => video_out_TDATA,
        vld_out => regslice_both_video_out_data_U_vld_out,
        ack_out => video_out_TREADY,
        apdone_blk => regslice_both_video_out_data_U_apdone_blk);

    regslice_both_video_out_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => sof_V_reg_1470_pp0_iter5_reg,
        vld_in => video_out_TVALID_int,
        ack_in => regslice_both_video_out_user_V_U_ack_in_dummy,
        data_out => video_out_TUSER,
        vld_out => regslice_both_video_out_user_V_U_vld_out,
        ack_out => video_out_TREADY,
        apdone_blk => regslice_both_video_out_user_V_U_apdone_blk);

    regslice_both_video_out_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => eol_V_reg_1476_pp0_iter5_reg,
        vld_in => video_out_TVALID_int,
        ack_in => regslice_both_video_out_last_V_U_ack_in_dummy,
        data_out => video_out_TLAST,
        vld_out => regslice_both_video_out_last_V_U_vld_out,
        ack_out => video_out_TREADY,
        apdone_blk => regslice_both_video_out_last_V_U_apdone_blk);





    B_V_reg_1481_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_V_reg_1481 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    B_V_reg_1481 <= B_V_fu_529_p1;
                end if; 
            end if;
        end if;
    end process;


    B_fixed_V_reg_1773_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_fixed_V_reg_1773 <= ap_const_lv29_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    B_fixed_V_reg_1773 <= ret_V_fu_1056_p2(47 downto 19);
                end if; 
            end if;
        end if;
    end process;


    Cb_V_reg_1550_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                Cb_V_reg_1550 <= ap_const_lv27_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    Cb_V_reg_1550 <= grp_fu_1453_p3;
                end if; 
            end if;
        end if;
    end process;


    Cr_V_reg_1545_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                Cr_V_reg_1545 <= ap_const_lv27_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    Cr_V_reg_1545 <= grp_fu_1444_p3;
                end if; 
            end if;
        end if;
    end process;


    G_V_reg_1486_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                G_V_reg_1486 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    G_V_reg_1486 <= video_in_TDATA_int(15 downto 8);
                end if; 
            end if;
        end if;
    end process;


    G_fixed_V_reg_1783_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                G_fixed_V_reg_1783 <= ap_const_lv29_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    G_fixed_V_reg_1783 <= ret_V_10_fu_1099_p2(47 downto 19);
                end if; 
            end if;
        end if;
    end process;


    R_V_reg_1491_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                R_V_reg_1491 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    R_V_reg_1491 <= video_in_TDATA_int(23 downto 16);
                end if; 
            end if;
        end if;
    end process;


    R_fixed_V_reg_1789_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                R_fixed_V_reg_1789 <= ap_const_lv29_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    R_fixed_V_reg_1789 <= ret_V_11_fu_1123_p2(47 downto 19);
                end if; 
            end if;
        end if;
    end process;


    Y_V_reg_1580_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                Y_V_reg_1580 <= ap_const_lv27_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    Y_V_reg_1580 <= grp_fu_1462_p3;
                end if; 
            end if;
        end if;
    end process;


    address_counter_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                address_counter_V <= ap_const_lv8_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (start_V_fu_713_p2 = ap_const_lv1_1) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (copy2_state_load_load_fu_803_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((copy2_state_load_load_fu_803_p1 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (grp_read_fu_247_p2 = ap_const_lv1_1) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (start_V_fu_713_p2 = ap_const_lv1_1) and (copy1_state_load_load_fu_766_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0)) or ((copy1_state_load_load_fu_766_p1 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (grp_read_fu_247_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0)))) then 
                    address_counter_V <= ap_const_lv8_0;
                elsif ((((copy2_state_load_load_fu_803_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((copy2_state_load_load_fu_803_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((copy1_state_load_load_fu_766_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0)) or ((copy1_state_load_load_fu_766_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0)))) then 
                    address_counter_V <= grp_fu_469_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_tmp_V_reg_438_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_phi_reg_pp0_iter1_tmp_V_reg_438 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    ap_phi_reg_pp0_iter1_tmp_V_reg_438 <= ap_phi_reg_pp0_iter0_tmp_V_reg_438;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_tmp_V_reg_438_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_phi_reg_pp0_iter2_tmp_V_reg_438 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_phi_reg_pp0_iter2_tmp_V_reg_438 <= ap_phi_reg_pp0_iter1_tmp_V_reg_438;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter3_tmp_V_reg_438_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_phi_reg_pp0_iter3_tmp_V_reg_438 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_phi_reg_pp0_iter3_tmp_V_reg_438 <= ap_phi_reg_pp0_iter2_tmp_V_reg_438;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter4_tmp_V_reg_438_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_phi_reg_pp0_iter4_tmp_V_reg_438 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    ap_phi_reg_pp0_iter4_tmp_V_reg_438 <= ap_phi_reg_pp0_iter3_tmp_V_reg_438;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter5_tmp_V_reg_438_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_phi_reg_pp0_iter5_tmp_V_reg_438 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587_pp0_iter4_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter5_tmp_V_reg_438 <= newY_V_3_reg_1721;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_phi_reg_pp0_iter5_tmp_V_reg_438 <= newY_V_1_reg_1742;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_phi_reg_pp0_iter5_tmp_V_reg_438 <= ap_phi_reg_pp0_iter4_tmp_V_reg_438;
                end if; 
            end if;
        end if;
    end process;


    copy1_empty_data_ready_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy1_empty_data_ready_V <= ap_const_lv1_0;
            else
                if ((ap_const_boolean_1 = ap_condition_882)) then
                    if (((start_V_reg_1611 = ap_const_lv1_1) and (copy1_state_load_reg_1637 = ap_const_lv2_0))) then 
                        copy1_empty_data_ready_V <= ap_const_lv1_0;
                    elsif (((copy1_state_load_reg_1637 = ap_const_lv2_3) and (icmp_ln879_4_reg_1651 = ap_const_lv1_1))) then 
                        copy1_empty_data_ready_V <= ap_const_lv1_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    copy1_histogram_V_addr_reg_1674_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy1_histogram_V_addr_reg_1674 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    copy1_histogram_V_addr_reg_1674 <= zext_ln544_fu_798_p1(8 - 1 downto 0);
                end if; 
            end if;
        end if;
    end process;


    copy1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy1_state <= ap_const_lv2_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (start_V_fu_713_p2 = ap_const_lv1_1) and (copy1_state_load_load_fu_766_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
                    copy1_state <= ap_const_lv2_1;
                elsif (((copy1_state_load_load_fu_766_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (grp_fu_463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
                    copy1_state <= ap_const_lv2_2;
                elsif (((copy1_state_load_load_fu_766_p1 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (grp_read_fu_247_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
                    copy1_state <= ap_const_lv2_3;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (copy_select_V_fu_668_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((copy1_state_load_load_fu_766_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (grp_fu_463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0)))) then 
                    copy1_state <= ap_const_lv2_0;
                end if; 
            end if;
        end if;
    end process;


    copy1_state_load_reg_1637_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy1_state_load_reg_1637 <= ap_const_lv2_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
                    copy1_state_load_reg_1637 <= copy1_state;
                end if; 
            end if;
        end if;
    end process;


    copy1_state_load_reg_1637_pp0_iter4_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy1_state_load_reg_1637_pp0_iter4_reg <= ap_const_lv2_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    copy1_state_load_reg_1637_pp0_iter4_reg <= copy1_state_load_reg_1637;
                end if; 
            end if;
        end if;
    end process;


    copy1_sum_after_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy1_sum_after_V <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    copy1_sum_after_V <= add_ln700_9_fu_1021_p2;
                elsif (((copy1_state_load_reg_1637_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln879_3_reg_1665_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0))) then 
                    copy1_sum_after_V <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    copy1_sum_before_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy1_sum_before_V <= ap_const_lv32_0;
            else
                if ((ap_const_boolean_1 = ap_condition_369)) then
                    if ((copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1)) then 
                        copy1_sum_before_V <= add_ln700_5_fu_934_p2;
                    elsif ((ap_const_boolean_1 = ap_condition_738)) then 
                        copy1_sum_before_V <= ap_const_lv32_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    copy1_values_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy1_values_V <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    copy1_values_V <= add_ln700_4_fu_1006_p2;
                elsif (((copy1_state_load_reg_1637_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln879_3_reg_1665_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0))) then 
                    copy1_values_V <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    copy2_empty_data_ready_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy2_empty_data_ready_V <= ap_const_lv1_0;
            else
                if ((ap_const_boolean_1 = ap_condition_896)) then
                    if (((start_V_reg_1611 = ap_const_lv1_1) and (copy2_state_load_reg_1679 = ap_const_lv2_0))) then 
                        copy2_empty_data_ready_V <= ap_const_lv1_0;
                    elsif (((copy2_state_load_reg_1679 = ap_const_lv2_3) and (icmp_ln879_2_reg_1693 = ap_const_lv1_1))) then 
                        copy2_empty_data_ready_V <= ap_const_lv1_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    copy2_histogram_V_addr_reg_1632_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy2_histogram_V_addr_reg_1632 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
                    copy2_histogram_V_addr_reg_1632 <= zext_ln544_1_fu_761_p1(8 - 1 downto 0);
                end if; 
            end if;
        end if;
    end process;


    copy2_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy2_state <= ap_const_lv2_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (start_V_fu_713_p2 = ap_const_lv1_1) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (copy2_state_load_load_fu_803_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    copy2_state <= ap_const_lv2_1;
                elsif (((copy2_state_load_load_fu_803_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (grp_fu_463_p2 = ap_const_lv1_1) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    copy2_state <= ap_const_lv2_2;
                elsif (((copy2_state_load_load_fu_803_p1 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (grp_read_fu_247_p2 = ap_const_lv1_1) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    copy2_state <= ap_const_lv2_3;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (copy_select_V_fu_668_p3 = ap_const_lv1_0)) or ((copy2_state_load_load_fu_803_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (grp_fu_463_p2 = ap_const_lv1_1) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    copy2_state <= ap_const_lv2_0;
                end if; 
            end if;
        end if;
    end process;


    copy2_state_load_reg_1679_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy2_state_load_reg_1679 <= ap_const_lv2_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    copy2_state_load_reg_1679 <= copy2_state;
                end if; 
            end if;
        end if;
    end process;


    copy2_state_load_reg_1679_pp0_iter4_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy2_state_load_reg_1679_pp0_iter4_reg <= ap_const_lv2_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    copy2_state_load_reg_1679_pp0_iter4_reg <= copy2_state_load_reg_1679;
                end if; 
            end if;
        end if;
    end process;


    copy2_sum_after_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy2_sum_after_V <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587_pp0_iter4_reg = ap_const_lv1_0))) then 
                    copy2_sum_after_V <= add_ln700_10_fu_994_p2;
                elsif (((copy2_state_load_reg_1679_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln879_1_reg_1707_pp0_iter4_reg = ap_const_lv1_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    copy2_sum_after_V <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    copy2_sum_before_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy2_sum_before_V <= ap_const_lv32_0;
            else
                if ((ap_const_boolean_1 = ap_condition_369)) then
                    if ((ap_const_boolean_1 = ap_condition_811)) then 
                        copy2_sum_before_V <= ap_const_lv32_0;
                    elsif ((copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0)) then 
                        copy2_sum_before_V <= add_ln700_8_fu_886_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    copy2_values_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy2_values_V <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587_pp0_iter4_reg = ap_const_lv1_0))) then 
                    copy2_values_V <= add_ln700_7_fu_979_p2;
                elsif (((copy2_state_load_reg_1679_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln879_1_reg_1707_pp0_iter4_reg = ap_const_lv1_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    copy2_values_V <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    copy_select_V_reg_1587_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy_select_V_reg_1587 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    copy_select_V_reg_1587 <= frame_counter_V(2 downto 2);
                end if; 
            end if;
        end if;
    end process;


    copy_select_V_reg_1587_pp0_iter3_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy_select_V_reg_1587_pp0_iter3_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    copy_select_V_reg_1587_pp0_iter3_reg <= copy_select_V_reg_1587;
                end if; 
            end if;
        end if;
    end process;


    copy_select_V_reg_1587_pp0_iter4_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                copy_select_V_reg_1587_pp0_iter4_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    copy_select_V_reg_1587_pp0_iter4_reg <= copy_select_V_reg_1587_pp0_iter3_reg;
                end if; 
            end if;
        end if;
    end process;


    eol_V_reg_1476_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                eol_V_reg_1476 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    eol_V_reg_1476 <= video_in_TLAST_int;
                end if; 
            end if;
        end if;
    end process;


    eol_V_reg_1476_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                eol_V_reg_1476_pp0_iter1_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    eol_V_reg_1476_pp0_iter1_reg <= eol_V_reg_1476;
                end if; 
            end if;
        end if;
    end process;


    eol_V_reg_1476_pp0_iter2_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                eol_V_reg_1476_pp0_iter2_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    eol_V_reg_1476_pp0_iter2_reg <= eol_V_reg_1476_pp0_iter1_reg;
                end if; 
            end if;
        end if;
    end process;


    eol_V_reg_1476_pp0_iter3_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                eol_V_reg_1476_pp0_iter3_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    eol_V_reg_1476_pp0_iter3_reg <= eol_V_reg_1476_pp0_iter2_reg;
                end if; 
            end if;
        end if;
    end process;


    eol_V_reg_1476_pp0_iter4_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                eol_V_reg_1476_pp0_iter4_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    eol_V_reg_1476_pp0_iter4_reg <= eol_V_reg_1476_pp0_iter3_reg;
                end if; 
            end if;
        end if;
    end process;


    eol_V_reg_1476_pp0_iter5_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                eol_V_reg_1476_pp0_iter5_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    eol_V_reg_1476_pp0_iter5_reg <= eol_V_reg_1476_pp0_iter4_reg;
                end if; 
            end if;
        end if;
    end process;


    frame_counter_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                frame_counter_V <= ap_const_lv32_FFFFFFFF;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (sof_V_reg_1470_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    frame_counter_V <= add_ln700_fu_590_p2;
                end if; 
            end if;
        end if;
    end process;


    frames_V_1_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                frames_V_1_data_reg <= ap_const_lv32_0;
            else
                if ((((frames_V_1_vld_reg = ap_const_logic_0) and (frames_V_1_vld_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (frames_V_1_vld_in = ap_const_logic_1) and (frames_V_1_vld_reg = ap_const_logic_1)))) then 
                    frames_V_1_data_reg <= frame_counter_V;
                end if; 
            end if;
        end if;
    end process;


    frames_V_1_vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                frames_V_1_vld_reg <= ap_const_logic_0;
            else
                if (((frames_V_1_vld_reg = ap_const_logic_0) and (frames_V_1_vld_in = ap_const_logic_1))) then 
                    frames_V_1_vld_reg <= ap_const_logic_1;
                elsif (((frames_V_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (frames_V_1_vld_reg = ap_const_logic_1))) then 
                    frames_V_1_vld_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln1494_reg_1778_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                icmp_ln1494_reg_1778 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    icmp_ln1494_reg_1778 <= icmp_ln1494_fu_1072_p2;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln879_1_reg_1707_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                icmp_ln879_1_reg_1707 <= ap_const_lv1_0;
            else
                if (((copy2_state_load_load_fu_803_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln879_1_reg_1707 <= grp_fu_463_p2;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln879_1_reg_1707_pp0_iter4_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                icmp_ln879_1_reg_1707_pp0_iter4_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln879_1_reg_1707_pp0_iter4_reg <= icmp_ln879_1_reg_1707;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln879_2_reg_1693_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                icmp_ln879_2_reg_1693 <= ap_const_lv1_0;
            else
                if (((copy2_state_load_load_fu_803_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln879_2_reg_1693 <= grp_fu_463_p2;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln879_3_reg_1665_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                icmp_ln879_3_reg_1665 <= ap_const_lv1_0;
            else
                if (((copy1_state_load_load_fu_766_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
                    icmp_ln879_3_reg_1665 <= grp_fu_463_p2;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln879_3_reg_1665_pp0_iter4_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                icmp_ln879_3_reg_1665_pp0_iter4_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln879_3_reg_1665_pp0_iter4_reg <= icmp_ln879_3_reg_1665;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln879_4_reg_1651_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                icmp_ln879_4_reg_1651 <= ap_const_lv1_0;
            else
                if (((copy1_state_load_load_fu_766_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
                    icmp_ln879_4_reg_1651 <= grp_fu_463_p2;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln879_reg_1591_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                icmp_ln879_reg_1591 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    icmp_ln879_reg_1591 <= icmp_ln879_fu_680_p2;
                end if; 
            end if;
        end if;
    end process;


    newY_V_1_reg_1742_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                newY_V_1_reg_1742 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    newY_V_1_reg_1742 <= newY_V_1_fu_954_p3;
                end if; 
            end if;
        end if;
    end process;


    newY_V_3_reg_1721_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                newY_V_3_reg_1721 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0))) then 
                    newY_V_3_reg_1721 <= newY_V_3_fu_906_p3;
                end if; 
            end if;
        end if;
    end process;


    newY_V_4_reg_1615_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                newY_V_4_reg_1615 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    newY_V_4_reg_1615 <= newY_V_4_fu_755_p2;
                end if; 
            end if;
        end if;
    end process;


    newY_V_4_reg_1615_pp0_iter4_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                newY_V_4_reg_1615_pp0_iter4_reg <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    newY_V_4_reg_1615_pp0_iter4_reg <= newY_V_4_reg_1615;
                end if; 
            end if;
        end if;
    end process;


    pixel_counter_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pixel_counter_V <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    pixel_counter_V <= add_ln700_2_fu_645_p2;
                end if; 
            end if;
        end if;
    end process;


    pixels_V_1_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pixels_V_1_data_reg <= ap_const_lv32_0;
            else
                if ((((pixels_V_1_vld_reg = ap_const_logic_0) and (pixels_V_1_vld_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (pixels_V_1_vld_in = ap_const_logic_1) and (pixels_V_1_vld_reg = ap_const_logic_1)))) then 
                    pixels_V_1_data_reg <= add_ln700_2_fu_645_p2;
                end if; 
            end if;
        end if;
    end process;


    pixels_V_1_vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pixels_V_1_vld_reg <= ap_const_logic_0;
            else
                if (((pixels_V_1_vld_reg = ap_const_logic_0) and (pixels_V_1_vld_in = ap_const_logic_1))) then 
                    pixels_V_1_vld_reg <= ap_const_logic_1;
                elsif (((pixels_V_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (pixels_V_1_vld_reg = ap_const_logic_1))) then 
                    pixels_V_1_vld_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    r_V_1_reg_1768_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                r_V_1_reg_1768 <= ap_const_lv47_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    r_V_1_reg_1768 <= grp_fu_635_p2;
                end if; 
            end if;
        end if;
    end process;


    r_V_reg_1763_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                r_V_reg_1763 <= ap_const_lv48_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    r_V_reg_1763 <= grp_fu_629_p2;
                end if; 
            end if;
        end if;
    end process;


    r_reg_1596_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                r_reg_1596 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    r_reg_1596 <= r_fu_689_p2;
                end if; 
            end if;
        end if;
    end process;


    read_done_V_1_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                read_done_V_1_data_reg <= ap_const_lv1_0;
            else
                if ((((read_done_V_1_vld_reg = ap_const_logic_0) and (read_done_V_1_vld_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (read_done_V_1_vld_in = ap_const_logic_1) and (read_done_V_1_vld_reg = ap_const_logic_1)))) then 
                    read_done_V_1_data_reg <= read_done_V_1_data_in;
                end if; 
            end if;
        end if;
    end process;


    read_done_V_1_vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                read_done_V_1_vld_reg <= ap_const_logic_0;
            else
                if (((read_done_V_1_vld_reg = ap_const_logic_0) and (read_done_V_1_vld_in = ap_const_logic_1))) then 
                    read_done_V_1_vld_reg <= ap_const_logic_1;
                elsif (((read_done_V_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (read_done_V_1_vld_reg = ap_const_logic_1))) then 
                    read_done_V_1_vld_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    row_counter_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                row_counter_V <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (eol_V_reg_1476_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    row_counter_V <= add_ln700_1_fu_606_p2;
                end if; 
            end if;
        end if;
    end process;


    rows_V_1_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                rows_V_1_data_reg <= ap_const_lv32_0;
            else
                if ((((rows_V_1_vld_reg = ap_const_logic_0) and (rows_V_1_vld_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (rows_V_1_vld_in = ap_const_logic_1) and (rows_V_1_vld_reg = ap_const_logic_1)))) then 
                    rows_V_1_data_reg <= row_counter_V;
                end if; 
            end if;
        end if;
    end process;


    rows_V_1_vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                rows_V_1_vld_reg <= ap_const_logic_0;
            else
                if (((rows_V_1_vld_reg = ap_const_logic_0) and (rows_V_1_vld_in = ap_const_logic_1))) then 
                    rows_V_1_vld_reg <= ap_const_logic_1;
                elsif (((rows_V_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (rows_V_1_vld_reg = ap_const_logic_1))) then 
                    rows_V_1_vld_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    sof_V_reg_1470_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sof_V_reg_1470 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    sof_V_reg_1470 <= video_in_TUSER_int;
                end if; 
            end if;
        end if;
    end process;


    sof_V_reg_1470_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sof_V_reg_1470_pp0_iter1_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    sof_V_reg_1470_pp0_iter1_reg <= sof_V_reg_1470;
                end if; 
            end if;
        end if;
    end process;


    sof_V_reg_1470_pp0_iter2_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sof_V_reg_1470_pp0_iter2_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    sof_V_reg_1470_pp0_iter2_reg <= sof_V_reg_1470_pp0_iter1_reg;
                end if; 
            end if;
        end if;
    end process;


    sof_V_reg_1470_pp0_iter3_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sof_V_reg_1470_pp0_iter3_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    sof_V_reg_1470_pp0_iter3_reg <= sof_V_reg_1470_pp0_iter2_reg;
                end if; 
            end if;
        end if;
    end process;


    sof_V_reg_1470_pp0_iter4_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sof_V_reg_1470_pp0_iter4_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    sof_V_reg_1470_pp0_iter4_reg <= sof_V_reg_1470_pp0_iter3_reg;
                end if; 
            end if;
        end if;
    end process;


    sof_V_reg_1470_pp0_iter5_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sof_V_reg_1470_pp0_iter5_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    sof_V_reg_1470_pp0_iter5_reg <= sof_V_reg_1470_pp0_iter4_reg;
                end if; 
            end if;
        end if;
    end process;


    start_V_reg_1611_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                start_V_reg_1611 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    start_V_reg_1611 <= start_V_fu_713_p2;
                end if; 
            end if;
        end if;
    end process;


    sum_after_V_1_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sum_after_V_1_data_reg <= ap_const_lv32_0;
            else
                if ((((sum_after_V_1_vld_reg = ap_const_logic_0) and (sum_after_V_1_vld_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (sum_after_V_1_vld_in = ap_const_logic_1) and (sum_after_V_1_vld_reg = ap_const_logic_1)))) then 
                    sum_after_V_1_data_reg <= sum_after_V_1_data_in;
                end if; 
            end if;
        end if;
    end process;


    sum_after_V_1_vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sum_after_V_1_vld_reg <= ap_const_logic_0;
            else
                if (((sum_after_V_1_vld_reg = ap_const_logic_0) and (sum_after_V_1_vld_in = ap_const_logic_1))) then 
                    sum_after_V_1_vld_reg <= ap_const_logic_1;
                elsif (((sum_after_V_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (sum_after_V_1_vld_reg = ap_const_logic_1))) then 
                    sum_after_V_1_vld_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    sum_before_V_1_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sum_before_V_1_data_reg <= ap_const_lv32_0;
            else
                if ((((sum_before_V_1_vld_reg = ap_const_logic_0) and (sum_before_V_1_vld_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (sum_before_V_1_vld_in = ap_const_logic_1) and (sum_before_V_1_vld_reg = ap_const_logic_1)))) then 
                    sum_before_V_1_data_reg <= sum_before_V_1_data_in;
                end if; 
            end if;
        end if;
    end process;


    sum_before_V_1_vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sum_before_V_1_vld_reg <= ap_const_logic_0;
            else
                if (((sum_before_V_1_vld_reg = ap_const_logic_0) and (sum_before_V_1_vld_in = ap_const_logic_1))) then 
                    sum_before_V_1_vld_reg <= ap_const_logic_1;
                elsif (((sum_before_V_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (sum_before_V_1_vld_reg = ap_const_logic_1))) then 
                    sum_before_V_1_vld_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    values_V_1_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                values_V_1_data_reg <= ap_const_lv32_0;
            else
                if ((((values_V_1_vld_reg = ap_const_logic_0) and (values_V_1_vld_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (values_V_1_vld_in = ap_const_logic_1) and (values_V_1_vld_reg = ap_const_logic_1)))) then 
                    values_V_1_data_reg <= values_V_1_data_in;
                end if; 
            end if;
        end if;
    end process;


    values_V_1_vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                values_V_1_vld_reg <= ap_const_logic_0;
            else
                if (((values_V_1_vld_reg = ap_const_logic_0) and (values_V_1_vld_in = ap_const_logic_1))) then 
                    values_V_1_vld_reg <= ap_const_logic_1;
                elsif (((values_V_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (values_V_1_vld_reg = ap_const_logic_1))) then 
                    values_V_1_vld_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    write_ready_V_0_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                write_ready_V_0_data_reg <= ap_const_lv1_0;
            else
                if ((((write_ready_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((write_ready_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (write_ready_V_0_vld_reg = ap_const_logic_1)))) then 
                    write_ready_V_0_data_reg <= write_ready_V;
                end if; 
            end if;
        end if;
    end process;


    write_ready_V_0_vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                
            else
            end if;
        end if;
    end process;


    write_ready_V_read_reg_1623_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                write_ready_V_read_reg_1623 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    write_ready_V_read_reg_1623 <= write_ready_V_0_data_reg;
                end if; 
            end if;
        end if;
    end process;


    zext_ln544_1_reg_1627_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                zext_ln544_1_reg_1627(0) <= '0';
                zext_ln544_1_reg_1627(1) <= '0';
                zext_ln544_1_reg_1627(2) <= '0';
                zext_ln544_1_reg_1627(3) <= '0';
                zext_ln544_1_reg_1627(4) <= '0';
                zext_ln544_1_reg_1627(5) <= '0';
                zext_ln544_1_reg_1627(6) <= '0';
                zext_ln544_1_reg_1627(7) <= '0';
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
                                        zext_ln544_1_reg_1627(7 downto 0) <= zext_ln544_1_fu_761_p1(7 downto 0);
                end if; 
            end if;
        end if;
    end process;


    zext_ln544_2_reg_1697_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                zext_ln544_2_reg_1697(0) <= '0';
                zext_ln544_2_reg_1697(1) <= '0';
                zext_ln544_2_reg_1697(2) <= '0';
                zext_ln544_2_reg_1697(3) <= '0';
                zext_ln544_2_reg_1697(4) <= '0';
                zext_ln544_2_reg_1697(5) <= '0';
                zext_ln544_2_reg_1697(6) <= '0';
                zext_ln544_2_reg_1697(7) <= '0';
            else
                if (((copy2_state_load_load_fu_803_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        zext_ln544_2_reg_1697(7 downto 0) <= zext_ln544_2_fu_818_p1(7 downto 0);
                end if; 
            end if;
        end if;
    end process;


    zext_ln544_3_reg_1683_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                zext_ln544_3_reg_1683(0) <= '0';
                zext_ln544_3_reg_1683(1) <= '0';
                zext_ln544_3_reg_1683(2) <= '0';
                zext_ln544_3_reg_1683(3) <= '0';
                zext_ln544_3_reg_1683(4) <= '0';
                zext_ln544_3_reg_1683(5) <= '0';
                zext_ln544_3_reg_1683(6) <= '0';
                zext_ln544_3_reg_1683(7) <= '0';
            else
                if (((copy2_state_load_load_fu_803_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        zext_ln544_3_reg_1683(7 downto 0) <= zext_ln544_3_fu_807_p1(7 downto 0);
                end if; 
            end if;
        end if;
    end process;


    zext_ln544_4_reg_1655_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                zext_ln544_4_reg_1655(0) <= '0';
                zext_ln544_4_reg_1655(1) <= '0';
                zext_ln544_4_reg_1655(2) <= '0';
                zext_ln544_4_reg_1655(3) <= '0';
                zext_ln544_4_reg_1655(4) <= '0';
                zext_ln544_4_reg_1655(5) <= '0';
                zext_ln544_4_reg_1655(6) <= '0';
                zext_ln544_4_reg_1655(7) <= '0';
            else
                if (((copy1_state_load_load_fu_766_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
                                        zext_ln544_4_reg_1655(7 downto 0) <= zext_ln544_4_fu_781_p1(7 downto 0);
                end if; 
            end if;
        end if;
    end process;


    zext_ln544_5_reg_1641_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                zext_ln544_5_reg_1641(0) <= '0';
                zext_ln544_5_reg_1641(1) <= '0';
                zext_ln544_5_reg_1641(2) <= '0';
                zext_ln544_5_reg_1641(3) <= '0';
                zext_ln544_5_reg_1641(4) <= '0';
                zext_ln544_5_reg_1641(5) <= '0';
                zext_ln544_5_reg_1641(6) <= '0';
                zext_ln544_5_reg_1641(7) <= '0';
            else
                if (((copy1_state_load_load_fu_766_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
                                        zext_ln544_5_reg_1641(7 downto 0) <= zext_ln544_5_fu_770_p1(7 downto 0);
                end if; 
            end if;
        end if;
    end process;


    zext_ln544_reg_1669_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                zext_ln544_reg_1669(0) <= '0';
                zext_ln544_reg_1669(1) <= '0';
                zext_ln544_reg_1669(2) <= '0';
                zext_ln544_reg_1669(3) <= '0';
                zext_ln544_reg_1669(4) <= '0';
                zext_ln544_reg_1669(5) <= '0';
                zext_ln544_reg_1669(6) <= '0';
                zext_ln544_reg_1669(7) <= '0';
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        zext_ln544_reg_1669(7 downto 0) <= zext_ln544_fu_798_p1(7 downto 0);
                end if; 
            end if;
        end if;
    end process;


    zext_ln703_2_reg_1508_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                zext_ln703_2_reg_1508(0) <= '0';
                zext_ln703_2_reg_1508(1) <= '0';
                zext_ln703_2_reg_1508(2) <= '0';
                zext_ln703_2_reg_1508(3) <= '0';
                zext_ln703_2_reg_1508(4) <= '0';
                zext_ln703_2_reg_1508(5) <= '0';
                zext_ln703_2_reg_1508(6) <= '0';
                zext_ln703_2_reg_1508(7) <= '0';
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                                        zext_ln703_2_reg_1508(7 downto 0) <= zext_ln703_2_fu_561_p1(7 downto 0);
                end if; 
            end if;
        end if;
    end process;


    zext_ln703_reg_1496_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                zext_ln703_reg_1496(0) <= '0';
                zext_ln703_reg_1496(1) <= '0';
                zext_ln703_reg_1496(2) <= '0';
                zext_ln703_reg_1496(3) <= '0';
                zext_ln703_reg_1496(4) <= '0';
                zext_ln703_reg_1496(5) <= '0';
                zext_ln703_reg_1496(6) <= '0';
                zext_ln703_reg_1496(7) <= '0';
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        zext_ln703_reg_1496(7 downto 0) <= zext_ln703_fu_553_p1(7 downto 0);
                end if; 
            end if;
        end if;
    end process;

    write_ready_V_0_vld_reg <= '0';
    zext_ln703_reg_1496(24 downto 8) <= "00000000000000000";
    zext_ln703_2_reg_1508(26 downto 8) <= "0000000000000000000";
    zext_ln544_1_reg_1627(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln544_5_reg_1641(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln544_4_reg_1655(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln544_reg_1669(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln544_3_reg_1683(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln544_2_reg_1697(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    B_V_fu_529_p1 <= video_in_TDATA_int(8 - 1 downto 0);
    B_fixed_V_1_fu_1139_p3 <= 
        ap_const_lv29_7F80000 when (icmp_ln1494_reg_1778(0) = '1') else 
        B_fixed_V_reg_1773;
    B_fixed_V_3_fu_1157_p3 <= 
        ap_const_lv27_0 when (tmp_4_fu_1149_p3(0) = '1') else 
        trunc_ln199_fu_1145_p1;
    B_fixed_V_fu_1062_p4 <= ret_V_fu_1056_p2(47 downto 19);
    G_fixed_V_1_fu_1170_p3 <= 
        ap_const_lv29_7F80000 when (icmp_ln1494_1_fu_1165_p2(0) = '1') else 
        G_fixed_V_reg_1783;
    G_fixed_V_3_fu_1189_p3 <= 
        ap_const_lv27_0 when (tmp_5_fu_1181_p3(0) = '1') else 
        trunc_ln202_fu_1177_p1;
    R_V_fu_543_p4 <= video_in_TDATA_int(23 downto 16);
    R_fixed_V_1_fu_1202_p3 <= 
        ap_const_lv29_7F80000 when (icmp_ln1494_2_fu_1197_p2(0) = '1') else 
        R_fixed_V_reg_1789;
    R_fixed_V_3_fu_1221_p3 <= 
        ap_const_lv27_0 when (tmp_6_fu_1213_p3(0) = '1') else 
        trunc_ln205_fu_1209_p1;
    add_ln700_10_fu_994_p2 <= std_logic_vector(unsigned(copy2_sum_after_V) + unsigned(zext_ln700_3_fu_991_p1));
    add_ln700_1_fu_606_p2 <= std_logic_vector(unsigned(row_counter_V) + unsigned(ap_const_lv32_1));
    add_ln700_2_fu_645_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(pixel_counter_V));
    add_ln700_3_fu_859_p2 <= std_logic_vector(unsigned(ap_const_lv22_1) + unsigned(copy1_histogram_V_q0));
    add_ln700_4_fu_1006_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(copy1_values_V));
    add_ln700_5_fu_934_p2 <= std_logic_vector(unsigned(copy1_sum_before_V) + unsigned(zext_ln700_fu_931_p1));
    add_ln700_6_fu_835_p2 <= std_logic_vector(unsigned(ap_const_lv22_1) + unsigned(copy2_histogram_V_q0));
    add_ln700_7_fu_979_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(copy2_values_V));
    add_ln700_8_fu_886_p2 <= std_logic_vector(unsigned(copy2_sum_before_V) + unsigned(zext_ln700_1_fu_883_p1));
    add_ln700_9_fu_1021_p2 <= std_logic_vector(unsigned(copy1_sum_after_V) + unsigned(zext_ln700_2_fu_1018_p1));
    add_ln700_fu_590_p2 <= std_logic_vector(unsigned(frame_counter_V) + unsigned(ap_const_lv32_1));
    and_ln415_1_fu_1271_p2 <= (tmp_8_fu_1263_p3 and or_ln412_1_fu_1257_p2);
    and_ln415_2_fu_1329_p2 <= (tmp_10_fu_1321_p3 and or_ln412_2_fu_1315_p2);
    and_ln415_3_fu_1387_p2 <= (tmp_12_fu_1379_p3 and or_ln412_3_fu_1373_p2);
    and_ln415_fu_745_p2 <= (tmp_3_fu_738_p3 and or_ln412_fu_733_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(video_in_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((video_in_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter6, video_in_TVALID_int, video_out_TREADY_int)
    begin
                ap_block_pp0_stage0_11001 <= (((video_out_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((video_in_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter6, video_in_TVALID_int, video_out_TREADY_int)
    begin
                ap_block_pp0_stage0_subdone <= (((video_out_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((video_in_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(frames_V_1_ack_in, rows_V_1_ack_in, pixels_V_1_ack_in, sum_before_V_1_ack_in, sum_after_V_1_ack_in, values_V_1_ack_in, read_done_V_1_ack_in, ap_enable_reg_pp0_iter6, regslice_both_video_out_data_U_apdone_blk)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((pixels_V_1_ack_in = ap_const_logic_0) or (rows_V_1_ack_in = ap_const_logic_0) or (frames_V_1_ack_in = ap_const_logic_0) or (read_done_V_1_ack_in = ap_const_logic_0) or (values_V_1_ack_in = ap_const_logic_0) or (sum_after_V_1_ack_in = ap_const_logic_0) or (sum_before_V_1_ack_in = ap_const_logic_0) or (regslice_both_video_out_data_U_apdone_blk = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(frames_V_1_ack_in, rows_V_1_ack_in, pixels_V_1_ack_in, sum_before_V_1_ack_in, sum_after_V_1_ack_in, values_V_1_ack_in, read_done_V_1_ack_in, ap_enable_reg_pp0_iter6, regslice_both_video_out_data_U_apdone_blk, video_out_TREADY_int)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((pixels_V_1_ack_in = ap_const_logic_0) or (rows_V_1_ack_in = ap_const_logic_0) or (frames_V_1_ack_in = ap_const_logic_0) or (read_done_V_1_ack_in = ap_const_logic_0) or (values_V_1_ack_in = ap_const_logic_0) or (video_out_TREADY_int = ap_const_logic_0) or (sum_after_V_1_ack_in = ap_const_logic_0) or (sum_before_V_1_ack_in = ap_const_logic_0) or (regslice_both_video_out_data_U_apdone_blk = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(frames_V_1_ack_in, rows_V_1_ack_in, pixels_V_1_ack_in, sum_before_V_1_ack_in, sum_after_V_1_ack_in, values_V_1_ack_in, read_done_V_1_ack_in, ap_enable_reg_pp0_iter6, regslice_both_video_out_data_U_apdone_blk, video_out_TREADY_int)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((pixels_V_1_ack_in = ap_const_logic_0) or (rows_V_1_ack_in = ap_const_logic_0) or (frames_V_1_ack_in = ap_const_logic_0) or (read_done_V_1_ack_in = ap_const_logic_0) or (values_V_1_ack_in = ap_const_logic_0) or (video_out_TREADY_int = ap_const_logic_0) or (sum_after_V_1_ack_in = ap_const_logic_0) or (sum_before_V_1_ack_in = ap_const_logic_0) or (regslice_both_video_out_data_U_apdone_blk = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter0_assign_proc : process(video_in_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (video_in_TVALID_int = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage1_iter6_assign_proc : process(frames_V_1_ack_in, rows_V_1_ack_in, pixels_V_1_ack_in, sum_before_V_1_ack_in, sum_after_V_1_ack_in, values_V_1_ack_in, read_done_V_1_ack_in, regslice_both_video_out_data_U_apdone_blk)
    begin
                ap_block_state6_pp0_stage1_iter6 <= ((pixels_V_1_ack_in = ap_const_logic_0) or (rows_V_1_ack_in = ap_const_logic_0) or (frames_V_1_ack_in = ap_const_logic_0) or (read_done_V_1_ack_in = ap_const_logic_0) or (values_V_1_ack_in = ap_const_logic_0) or (sum_after_V_1_ack_in = ap_const_logic_0) or (sum_before_V_1_ack_in = ap_const_logic_0) or (regslice_both_video_out_data_U_apdone_blk = ap_const_logic_1));
    end process;

        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1529_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, copy_select_V_reg_1587)
    begin
                ap_condition_1529 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0));
    end process;


    ap_condition_1530_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, copy_select_V_reg_1587, copy1_state_load_load_fu_766_p1)
    begin
                ap_condition_1530 <= ((copy1_state_load_load_fu_766_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0));
    end process;


    ap_condition_1533_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, copy_select_V_reg_1587)
    begin
                ap_condition_1533 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_1547_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, copy_select_V_reg_1587, copy2_state_load_load_fu_803_p1)
    begin
                ap_condition_1547 <= ((copy2_state_load_load_fu_803_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_1552_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, copy_select_V_reg_1587, copy1_state_load_load_fu_766_p1)
    begin
                ap_condition_1552 <= ((copy1_state_load_load_fu_766_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0));
    end process;


    ap_condition_1555_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, copy_select_V_reg_1587, copy2_state_load_load_fu_803_p1)
    begin
                ap_condition_1555 <= ((copy2_state_load_load_fu_803_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_1559_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, copy_select_V_reg_1587, copy1_state_load_reg_1637)
    begin
                ap_condition_1559 <= ((copy1_state_load_reg_1637 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (copy_select_V_reg_1587 = ap_const_lv1_0));
    end process;


    ap_condition_1563_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, copy_select_V_reg_1587, copy2_state_load_reg_1679)
    begin
                ap_condition_1563 <= ((copy2_state_load_reg_1679 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_369_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1_11001)
    begin
                ap_condition_369 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_680_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
                ap_condition_680 <= ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_condition_738_assign_proc : process(copy_select_V_reg_1587_pp0_iter3_reg, copy1_state_load_reg_1637_pp0_iter4_reg, icmp_ln879_3_reg_1665_pp0_iter4_reg)
    begin
                ap_condition_738 <= ((copy1_state_load_reg_1637_pp0_iter4_reg = ap_const_lv2_1) and (icmp_ln879_3_reg_1665_pp0_iter4_reg = ap_const_lv1_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_condition_811_assign_proc : process(copy_select_V_reg_1587_pp0_iter3_reg, copy2_state_load_reg_1679_pp0_iter4_reg, icmp_ln879_1_reg_1707_pp0_iter4_reg)
    begin
                ap_condition_811 <= ((copy2_state_load_reg_1679_pp0_iter4_reg = ap_const_lv2_1) and (icmp_ln879_1_reg_1707_pp0_iter4_reg = ap_const_lv1_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1));
    end process;


    ap_condition_873_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1_01001)
    begin
                ap_condition_873 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_882_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, copy_select_V_reg_1587)
    begin
                ap_condition_882 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (copy_select_V_reg_1587 = ap_const_lv1_0));
    end process;


    ap_condition_896_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, copy_select_V_reg_1587)
    begin
                ap_condition_896 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_tmp_V_reg_438 <= "XXXXXXXX";
    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    copy1_empty_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln544_5_reg_1641, zext_ln544_reg_1669)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            copy1_empty_data_V_address0 <= zext_ln544_reg_1669(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            copy1_empty_data_V_address0 <= zext_ln544_5_reg_1641(8 - 1 downto 0);
        else 
            copy1_empty_data_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    copy1_empty_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            copy1_empty_data_V_ce0 <= ap_const_logic_1;
        else 
            copy1_empty_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    copy1_empty_data_V_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, copy_select_V_reg_1587, copy1_state_load_reg_1637)
    begin
        if (((copy1_state_load_reg_1637 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
            copy1_empty_data_V_we0 <= ap_const_logic_1;
        else 
            copy1_empty_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    copy1_histogram_V_address0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln544_4_fu_781_p1, zext_ln544_fu_798_p1, copy1_histogram_V_addr_reg_1674, ap_condition_1530, ap_condition_1533)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                copy1_histogram_V_address0 <= copy1_histogram_V_addr_reg_1674;
            elsif ((ap_const_boolean_1 = ap_condition_1533)) then 
                copy1_histogram_V_address0 <= zext_ln544_fu_798_p1(8 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1530)) then 
                copy1_histogram_V_address0 <= zext_ln544_4_fu_781_p1(8 - 1 downto 0);
            else 
                copy1_histogram_V_address0 <= "XXXXXXXX";
            end if;
        else 
            copy1_histogram_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    copy1_histogram_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, copy_select_V_reg_1587, copy1_state_load_load_fu_766_p1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((copy1_state_load_load_fu_766_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0)))) then 
            copy1_histogram_V_ce0 <= ap_const_logic_1;
        else 
            copy1_histogram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    copy1_histogram_V_d0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, add_ln700_3_fu_859_p2, ap_condition_1530)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                copy1_histogram_V_d0 <= add_ln700_3_fu_859_p2;
            elsif ((ap_const_boolean_1 = ap_condition_1530)) then 
                copy1_histogram_V_d0 <= ap_const_lv22_0;
            else 
                copy1_histogram_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            copy1_histogram_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    copy1_histogram_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, copy_select_V_reg_1587, copy1_state_load_load_fu_766_p1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((copy1_state_load_load_fu_766_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0)))) then 
            copy1_histogram_V_we0 <= ap_const_logic_1;
        else 
            copy1_histogram_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    copy1_state_load_load_fu_766_p1 <= copy1_state;

    copy2_empty_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln544_1_reg_1627, zext_ln544_3_reg_1683)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            copy2_empty_data_V_address0 <= zext_ln544_1_reg_1627(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            copy2_empty_data_V_address0 <= zext_ln544_3_reg_1683(8 - 1 downto 0);
        else 
            copy2_empty_data_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    copy2_empty_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            copy2_empty_data_V_ce0 <= ap_const_logic_1;
        else 
            copy2_empty_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    copy2_empty_data_V_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, copy_select_V_reg_1587, copy2_state_load_reg_1679)
    begin
        if (((copy2_state_load_reg_1679 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            copy2_empty_data_V_we0 <= ap_const_logic_1;
        else 
            copy2_empty_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    copy2_histogram_V_address0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln544_1_fu_761_p1, copy2_histogram_V_addr_reg_1632, zext_ln544_2_fu_818_p1, ap_condition_1529, ap_condition_1547)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                copy2_histogram_V_address0 <= copy2_histogram_V_addr_reg_1632;
            elsif ((ap_const_boolean_1 = ap_condition_1547)) then 
                copy2_histogram_V_address0 <= zext_ln544_2_fu_818_p1(8 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1529)) then 
                copy2_histogram_V_address0 <= zext_ln544_1_fu_761_p1(8 - 1 downto 0);
            else 
                copy2_histogram_V_address0 <= "XXXXXXXX";
            end if;
        else 
            copy2_histogram_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    copy2_histogram_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, copy_select_V_reg_1587, copy2_state_load_load_fu_803_p1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((copy2_state_load_load_fu_803_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0)))) then 
            copy2_histogram_V_ce0 <= ap_const_logic_1;
        else 
            copy2_histogram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    copy2_histogram_V_d0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, add_ln700_6_fu_835_p2, ap_condition_1547)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                copy2_histogram_V_d0 <= add_ln700_6_fu_835_p2;
            elsif ((ap_const_boolean_1 = ap_condition_1547)) then 
                copy2_histogram_V_d0 <= ap_const_lv22_0;
            else 
                copy2_histogram_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            copy2_histogram_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    copy2_histogram_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, copy_select_V_reg_1587, copy2_state_load_load_fu_803_p1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (copy_select_V_reg_1587 = ap_const_lv1_0)) or ((copy2_state_load_load_fu_803_p1 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            copy2_histogram_V_we0 <= ap_const_logic_1;
        else 
            copy2_histogram_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    copy2_state_load_load_fu_803_p1 <= copy2_state;
    copy_select_V_fu_668_p3 <= frame_counter_V(2 downto 2);

    frames_V_1_ack_in_assign_proc : process(frames_V_1_vld_reg)
    begin
        if (((frames_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (frames_V_1_vld_reg = ap_const_logic_1)))) then 
            frames_V_1_ack_in <= ap_const_logic_1;
        else 
            frames_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    frames_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            frames_V_1_vld_in <= ap_const_logic_1;
        else 
            frames_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1414_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1414_ce <= ap_const_logic_1;
        else 
            grp_fu_1414_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1414_p0 <= ap_const_lv26_2645A(19 - 1 downto 0);
    grp_fu_1414_p1 <= zext_ln703_3_fu_557_p1(8 - 1 downto 0);

    grp_fu_1420_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1420_ce <= ap_const_logic_1;
        else 
            grp_fu_1420_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1420_p0 <= ap_const_lv25_1FF5979(17 - 1 downto 0);
    grp_fu_1420_p1 <= grp_fu_1420_p10(8 - 1 downto 0);
    grp_fu_1420_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_fu_529_p1),25));
    grp_fu_1420_p2 <= grp_fu_1420_p20(26 - 1 downto 0);
    grp_fu_1420_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_564_p3),27));

    grp_fu_1428_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1428_ce <= ap_const_logic_1;
        else 
            grp_fu_1428_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1428_p0 <= ap_const_lv26_3FEA66D(18 - 1 downto 0);
    grp_fu_1428_p1 <= zext_ln703_3_fu_557_p1(8 - 1 downto 0);
    grp_fu_1428_p2 <= grp_fu_1428_p20(26 - 1 downto 0);
    grp_fu_1428_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln703_1_fu_575_p3),27));

    grp_fu_1436_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1436_ce <= ap_const_logic_1;
        else 
            grp_fu_1436_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1436_p0 <= ap_const_lv25_E978(17 - 1 downto 0);
    grp_fu_1436_p1 <= zext_ln703_reg_1496(8 - 1 downto 0);

    grp_fu_1444_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1444_ce <= ap_const_logic_1;
        else 
            grp_fu_1444_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1444_p0 <= ap_const_lv27_7FCA686(19 - 1 downto 0);
    grp_fu_1444_p1 <= zext_ln703_2_fu_561_p1(8 - 1 downto 0);

    grp_fu_1453_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1453_ce <= ap_const_logic_1;
        else 
            grp_fu_1453_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1453_p0 <= ap_const_lv27_7FD5992(19 - 1 downto 0);
    grp_fu_1453_p1 <= zext_ln703_2_fu_561_p1(8 - 1 downto 0);

    grp_fu_1462_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1462_ce <= ap_const_logic_1;
        else 
            grp_fu_1462_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1462_p0 <= ap_const_lv27_4B22D(20 - 1 downto 0);
    grp_fu_1462_p1 <= zext_ln703_2_reg_1508(8 - 1 downto 0);
    grp_fu_1462_p2 <= grp_fu_1462_p20(26 - 1 downto 0);
    grp_fu_1462_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1436_p3),27));
    grp_fu_463_p2 <= "1" when (address_counter_V = ap_const_lv8_FF) else "0";
    grp_fu_469_p2 <= std_logic_vector(unsigned(address_counter_V) + unsigned(ap_const_lv8_1));

    grp_fu_629_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_629_ce <= ap_const_logic_1;
        else 
            grp_fu_629_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_629_p0 <= ap_const_lv48_E2D0E(21 - 1 downto 0);

    grp_fu_635_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_635_ce <= ap_const_logic_1;
        else 
            grp_fu_635_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_635_p0 <= ap_const_lv47_7FFFFFFA4973(20 - 1 downto 0);

    grp_fu_701_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_701_ce <= ap_const_logic_1;
        else 
            grp_fu_701_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_701_p0 <= ap_const_lv46_3FFFFFFD3F35(19 - 1 downto 0);

    grp_fu_707_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_707_ce <= ap_const_logic_1;
        else 
            grp_fu_707_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_707_p0 <= ap_const_lv48_B374B(21 - 1 downto 0);
    grp_read_fu_247_p2 <= write_ready_V_0_data_reg;
    icmp_ln1494_1_fu_1165_p2 <= "1" when (signed(G_fixed_V_reg_1783) > signed(ap_const_lv29_7F80000)) else "0";
    icmp_ln1494_2_fu_1197_p2 <= "1" when (signed(R_fixed_V_reg_1789) > signed(ap_const_lv29_7F80000)) else "0";
    icmp_ln1494_fu_1072_p2 <= "1" when (signed(B_fixed_V_fu_1062_p4) > signed(ap_const_lv29_7F80000)) else "0";
    icmp_ln879_fu_680_p2 <= "1" when (trunc_ln647_fu_676_p1 = ap_const_lv2_0) else "0";
    lhs_V_fu_1033_p3 <= (ap_phi_reg_pp0_iter5_tmp_V_reg_438 & ap_const_lv38_0);
    newY_V_1_fu_954_p3 <= 
        newY_V_fu_950_p1 when (copy1_empty_data_ready_V(0) = '1') else 
        newY_V_4_reg_1615_pp0_iter4_reg;
    newY_V_2_fu_902_p1 <= copy2_empty_data_V_q0(8 - 1 downto 0);
    newY_V_3_fu_906_p3 <= 
        newY_V_2_fu_902_p1 when (copy2_empty_data_ready_V(0) = '1') else 
        newY_V_4_reg_1615_pp0_iter4_reg;
    newY_V_4_fu_755_p2 <= std_logic_vector(unsigned(zext_ln415_fu_751_p1) + unsigned(p_Val2_6_fu_717_p4));
    newY_V_fu_950_p1 <= copy1_empty_data_V_q0(8 - 1 downto 0);
    or_ln412_1_fu_1257_p2 <= (tmp_7_fu_1239_p3 or r_1_fu_1251_p2);
    or_ln412_2_fu_1315_p2 <= (tmp_9_fu_1297_p3 or r_2_fu_1309_p2);
    or_ln412_3_fu_1373_p2 <= (tmp_11_fu_1355_p3 or r_3_fu_1367_p2);
    or_ln412_fu_733_p2 <= (tmp_2_fu_726_p3 or r_reg_1596);
    p_Val2_20_fu_1229_p4 <= B_fixed_V_3_fu_1157_p3(26 downto 19);
    p_Val2_21_fu_1287_p4 <= G_fixed_V_3_fu_1189_p3(26 downto 19);
    p_Val2_24_fu_1345_p4 <= R_fixed_V_3_fu_1221_p3(26 downto 19);
    p_Val2_26_fu_1339_p2 <= std_logic_vector(unsigned(p_Val2_21_fu_1287_p4) + unsigned(zext_ln415_2_fu_1335_p1));
    p_Val2_27_fu_1397_p2 <= std_logic_vector(unsigned(p_Val2_24_fu_1345_p4) + unsigned(zext_ln415_3_fu_1393_p1));
    p_Val2_6_fu_717_p4 <= Y_V_reg_1580(26 downto 19);
    p_Val2_s_fu_1281_p2 <= std_logic_vector(unsigned(p_Val2_20_fu_1229_p4) + unsigned(zext_ln415_1_fu_1277_p1));

    pixels_V_1_ack_in_assign_proc : process(pixels_V_1_vld_reg)
    begin
        if (((pixels_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (pixels_V_1_vld_reg = ap_const_logic_1)))) then 
            pixels_V_1_ack_in <= ap_const_logic_1;
        else 
            pixels_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    pixels_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            pixels_V_1_vld_in <= ap_const_logic_1;
        else 
            pixels_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_1251_p2 <= "0" when (trunc_ln718_1_fu_1247_p1 = ap_const_lv18_0) else "1";
    r_2_fu_1309_p2 <= "0" when (trunc_ln718_2_fu_1305_p1 = ap_const_lv18_0) else "1";
    r_3_fu_1367_p2 <= "0" when (trunc_ln718_3_fu_1363_p1 = ap_const_lv18_0) else "1";
    r_fu_689_p2 <= "0" when (trunc_ln718_fu_686_p1 = ap_const_lv18_0) else "1";

    read_done_V_1_ack_in_assign_proc : process(read_done_V_1_vld_reg)
    begin
        if (((read_done_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (read_done_V_1_vld_reg = ap_const_logic_1)))) then 
            read_done_V_1_ack_in <= ap_const_logic_1;
        else 
            read_done_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    read_done_V_1_data_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, copy_select_V_reg_1587, copy_select_V_reg_1587_pp0_iter3_reg, start_V_reg_1611, write_ready_V_read_reg_1623, copy1_state_load_reg_1637, icmp_ln879_3_reg_1665, copy2_state_load_reg_1679, icmp_ln879_1_reg_1707, ap_block_pp0_stage1_01001, ap_block_pp0_stage0_01001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (copy2_state_load_reg_1679 = ap_const_lv2_1) and (icmp_ln879_1_reg_1707 = ap_const_lv1_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (copy1_state_load_reg_1637 = ap_const_lv2_1) and (icmp_ln879_3_reg_1665 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0)))) then 
            read_done_V_1_data_in <= ap_const_lv1_1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (copy2_state_load_reg_1679 = ap_const_lv2_2) and (write_ready_V_read_reg_1623 = ap_const_lv1_1) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (start_V_reg_1611 = ap_const_lv1_1) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (copy2_state_load_reg_1679 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (copy1_state_load_reg_1637 = ap_const_lv2_2) and (write_ready_V_read_reg_1623 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (copy_select_V_reg_1587 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (start_V_reg_1611 = ap_const_lv1_1) and (copy1_state_load_reg_1637 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (copy_select_V_reg_1587 = ap_const_lv1_0)))) then 
            read_done_V_1_data_in <= ap_const_lv1_0;
        else 
            read_done_V_1_data_in <= "X";
        end if; 
    end process;


    read_done_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1_11001, copy_select_V_reg_1587, copy_select_V_reg_1587_pp0_iter3_reg, start_V_reg_1611, write_ready_V_read_reg_1623, copy1_state_load_reg_1637, icmp_ln879_3_reg_1665, copy2_state_load_reg_1679, icmp_ln879_1_reg_1707)
    begin
        if ((((copy2_state_load_reg_1679 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (write_ready_V_read_reg_1623 = ap_const_lv1_1) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (start_V_reg_1611 = ap_const_lv1_1) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (copy2_state_load_reg_1679 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((copy1_state_load_reg_1637 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (write_ready_V_read_reg_1623 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (copy_select_V_reg_1587 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (start_V_reg_1611 = ap_const_lv1_1) and (copy1_state_load_reg_1637 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (copy_select_V_reg_1587 = ap_const_lv1_0)) or ((copy2_state_load_reg_1679 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln879_1_reg_1707 = ap_const_lv1_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((copy1_state_load_reg_1637 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln879_3_reg_1665 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0)))) then 
            read_done_V_1_vld_in <= ap_const_logic_1;
        else 
            read_done_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_10_fu_1099_p2 <= std_logic_vector(unsigned(ret_V_9_fu_1085_p2) + unsigned(zext_ln1192_1_fu_1095_p1));
    ret_V_11_fu_1123_p2 <= std_logic_vector(unsigned(zext_ln728_1_fu_1045_p1) + unsigned(zext_ln1192_2_fu_1119_p1));
    ret_V_9_fu_1085_p2 <= std_logic_vector(unsigned(zext_ln728_fu_1041_p1) + unsigned(zext_ln703_5_fu_1081_p1));
    ret_V_fu_1056_p2 <= std_logic_vector(unsigned(zext_ln728_1_fu_1045_p1) + unsigned(zext_ln1192_fu_1052_p1));

    rows_V_1_ack_in_assign_proc : process(rows_V_1_vld_reg)
    begin
        if (((rows_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (rows_V_1_vld_reg = ap_const_logic_1)))) then 
            rows_V_1_ack_in <= ap_const_logic_1;
        else 
            rows_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    rows_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rows_V_1_vld_in <= ap_const_logic_1;
        else 
            rows_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1118_2_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_reg_1768),58));

        sext_ln1118_3_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_1763),50));

        sext_ln1118_4_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_701_p2),48));

        sext_ln1118_5_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_707_p2),50));


    shared_memory_V_address0_assign_proc : process(ap_enable_reg_pp0_iter3, zext_ln544_5_fu_770_p1, zext_ln544_4_reg_1655, zext_ln544_3_fu_807_p1, zext_ln544_2_reg_1697, ap_condition_1552, ap_condition_1555, ap_condition_1559, ap_condition_1563)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_1563)) then 
                shared_memory_V_address0 <= zext_ln544_2_reg_1697(8 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1559)) then 
                shared_memory_V_address0 <= zext_ln544_4_reg_1655(8 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1555)) then 
                shared_memory_V_address0 <= zext_ln544_3_fu_807_p1(8 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1552)) then 
                shared_memory_V_address0 <= zext_ln544_5_fu_770_p1(8 - 1 downto 0);
            else 
                shared_memory_V_address0 <= "XXXXXXXX";
            end if;
        else 
            shared_memory_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    shared_memory_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, copy_select_V_reg_1587, copy1_state_load_load_fu_766_p1, copy1_state_load_reg_1637, copy2_state_load_load_fu_803_p1, copy2_state_load_reg_1679)
    begin
        if ((((copy2_state_load_reg_1679 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((copy1_state_load_reg_1637 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (copy_select_V_reg_1587 = ap_const_lv1_0)) or ((copy2_state_load_load_fu_803_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((copy1_state_load_load_fu_766_p1 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (copy_select_V_reg_1587 = ap_const_lv1_0)))) then 
            shared_memory_V_ce0 <= ap_const_logic_1;
        else 
            shared_memory_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shared_memory_V_d0_assign_proc : process(copy_select_V_reg_1587, copy1_state_load_reg_1637, copy2_state_load_reg_1679, zext_ln209_1_fu_848_p1, zext_ln209_fu_872_p1, ap_condition_680)
    begin
        if ((ap_const_boolean_1 = ap_condition_680)) then
            if (((copy2_state_load_reg_1679 = ap_const_lv2_1) and (copy_select_V_reg_1587 = ap_const_lv1_1))) then 
                shared_memory_V_d0 <= zext_ln209_fu_872_p1;
            elsif (((copy1_state_load_reg_1637 = ap_const_lv2_1) and (copy_select_V_reg_1587 = ap_const_lv1_0))) then 
                shared_memory_V_d0 <= zext_ln209_1_fu_848_p1;
            else 
                shared_memory_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            shared_memory_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shared_memory_V_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, copy_select_V_reg_1587, copy1_state_load_reg_1637, copy2_state_load_reg_1679)
    begin
        if ((((copy2_state_load_reg_1679 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (copy_select_V_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((copy1_state_load_reg_1637 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (copy_select_V_reg_1587 = ap_const_lv1_0)))) then 
            shared_memory_V_we0 <= ap_const_logic_1;
        else 
            shared_memory_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln703_1_fu_575_p3 <= (B_V_reg_1481 & ap_const_lv18_0);
    shl_ln_fu_564_p3 <= (R_V_reg_1491 & ap_const_lv18_0);
    start_V_fu_713_p2 <= (sof_V_reg_1470_pp0_iter2_reg and icmp_ln879_reg_1591);

    sum_after_V_1_ack_in_assign_proc : process(sum_after_V_1_vld_reg)
    begin
        if (((sum_after_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (sum_after_V_1_vld_reg = ap_const_logic_1)))) then 
            sum_after_V_1_ack_in <= ap_const_logic_1;
        else 
            sum_after_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    sum_after_V_1_data_in_assign_proc : process(copy1_sum_after_V, copy2_sum_after_V, copy_select_V_reg_1587_pp0_iter3_reg, copy1_state_load_reg_1637_pp0_iter4_reg, copy2_state_load_reg_1679_pp0_iter4_reg, ap_condition_873)
    begin
        if ((ap_const_boolean_1 = ap_condition_873)) then
            if (((copy2_state_load_reg_1679_pp0_iter4_reg = ap_const_lv2_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1))) then 
                sum_after_V_1_data_in <= copy2_sum_after_V;
            elsif (((copy1_state_load_reg_1637_pp0_iter4_reg = ap_const_lv2_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0))) then 
                sum_after_V_1_data_in <= copy1_sum_after_V;
            else 
                sum_after_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            sum_after_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_after_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1_11001, copy_select_V_reg_1587_pp0_iter3_reg, copy1_state_load_reg_1637_pp0_iter4_reg, copy2_state_load_reg_1679_pp0_iter4_reg)
    begin
        if ((((copy2_state_load_reg_1679_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((copy1_state_load_reg_1637_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0)))) then 
            sum_after_V_1_vld_in <= ap_const_logic_1;
        else 
            sum_after_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    sum_before_V_1_ack_in_assign_proc : process(sum_before_V_1_vld_reg)
    begin
        if (((sum_before_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (sum_before_V_1_vld_reg = ap_const_logic_1)))) then 
            sum_before_V_1_ack_in <= ap_const_logic_1;
        else 
            sum_before_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    sum_before_V_1_data_in_assign_proc : process(copy1_sum_before_V, copy2_sum_before_V, copy_select_V_reg_1587_pp0_iter3_reg, copy1_state_load_reg_1637_pp0_iter4_reg, copy2_state_load_reg_1679_pp0_iter4_reg, ap_condition_873)
    begin
        if ((ap_const_boolean_1 = ap_condition_873)) then
            if (((copy2_state_load_reg_1679_pp0_iter4_reg = ap_const_lv2_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1))) then 
                sum_before_V_1_data_in <= copy2_sum_before_V;
            elsif (((copy1_state_load_reg_1637_pp0_iter4_reg = ap_const_lv2_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0))) then 
                sum_before_V_1_data_in <= copy1_sum_before_V;
            else 
                sum_before_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            sum_before_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_before_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1_11001, copy_select_V_reg_1587_pp0_iter3_reg, copy1_state_load_reg_1637_pp0_iter4_reg, copy2_state_load_reg_1679_pp0_iter4_reg)
    begin
        if ((((copy2_state_load_reg_1679_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((copy1_state_load_reg_1637_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0)))) then 
            sum_before_V_1_vld_in <= ap_const_logic_1;
        else 
            sum_before_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1321_p3 <= G_fixed_V_3_fu_1189_p3(18 downto 18);
    tmp_11_fu_1355_p3 <= R_fixed_V_3_fu_1221_p3(19 downto 19);
    tmp_12_fu_1379_p3 <= R_fixed_V_3_fu_1221_p3(18 downto 18);
    tmp_2_fu_726_p3 <= Y_V_reg_1580(19 downto 19);
    tmp_3_fu_738_p3 <= Y_V_reg_1580(18 downto 18);
    tmp_4_fu_1149_p3 <= B_fixed_V_1_fu_1139_p3(28 downto 28);
    tmp_5_fu_1181_p3 <= G_fixed_V_1_fu_1170_p3(28 downto 28);
    tmp_6_fu_1213_p3 <= R_fixed_V_1_fu_1202_p3(28 downto 28);
    tmp_7_fu_1239_p3 <= B_fixed_V_3_fu_1157_p3(19 downto 19);
    tmp_8_fu_1263_p3 <= B_fixed_V_3_fu_1157_p3(18 downto 18);
    tmp_9_fu_1297_p3 <= G_fixed_V_3_fu_1189_p3(19 downto 19);
    trunc_ln199_fu_1145_p1 <= B_fixed_V_1_fu_1139_p3(27 - 1 downto 0);
    trunc_ln202_fu_1177_p1 <= G_fixed_V_1_fu_1170_p3(27 - 1 downto 0);
    trunc_ln205_fu_1209_p1 <= R_fixed_V_1_fu_1202_p3(27 - 1 downto 0);
    trunc_ln647_fu_676_p1 <= frame_counter_V(2 - 1 downto 0);
    trunc_ln718_1_fu_1247_p1 <= B_fixed_V_3_fu_1157_p3(18 - 1 downto 0);
    trunc_ln718_2_fu_1305_p1 <= G_fixed_V_3_fu_1189_p3(18 - 1 downto 0);
    trunc_ln718_3_fu_1363_p1 <= R_fixed_V_3_fu_1221_p3(18 - 1 downto 0);
    trunc_ln718_fu_686_p1 <= grp_fu_1462_p3(18 - 1 downto 0);

    values_V_1_ack_in_assign_proc : process(values_V_1_vld_reg)
    begin
        if (((values_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (values_V_1_vld_reg = ap_const_logic_1)))) then 
            values_V_1_ack_in <= ap_const_logic_1;
        else 
            values_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    values_V_1_data_in_assign_proc : process(copy1_values_V, copy2_values_V, copy_select_V_reg_1587_pp0_iter3_reg, copy1_state_load_reg_1637_pp0_iter4_reg, copy2_state_load_reg_1679_pp0_iter4_reg, ap_condition_873)
    begin
        if ((ap_const_boolean_1 = ap_condition_873)) then
            if (((copy2_state_load_reg_1679_pp0_iter4_reg = ap_const_lv2_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1))) then 
                values_V_1_data_in <= copy2_values_V;
            elsif (((copy1_state_load_reg_1637_pp0_iter4_reg = ap_const_lv2_1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0))) then 
                values_V_1_data_in <= copy1_values_V;
            else 
                values_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            values_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    values_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1_11001, copy_select_V_reg_1587_pp0_iter3_reg, copy1_state_load_reg_1637_pp0_iter4_reg, copy2_state_load_reg_1679_pp0_iter4_reg)
    begin
        if ((((copy2_state_load_reg_1679_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((copy1_state_load_reg_1637_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (copy_select_V_reg_1587_pp0_iter3_reg = ap_const_lv1_0)))) then 
            values_V_1_vld_in <= ap_const_logic_1;
        else 
            values_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    video_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, video_in_TVALID_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            video_in_TDATA_blk_n <= video_in_TVALID_int;
        else 
            video_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    video_in_TREADY_assign_proc : process(video_in_TVALID, regslice_both_video_in_data_U_ack_in)
    begin
        if (((regslice_both_video_in_data_U_ack_in = ap_const_logic_1) and (video_in_TVALID = ap_const_logic_1))) then 
            video_in_TREADY <= ap_const_logic_1;
        else 
            video_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    video_in_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            video_in_TREADY_int <= ap_const_logic_1;
        else 
            video_in_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    video_out_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, video_out_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            video_out_TDATA_blk_n <= video_out_TREADY_int;
        else 
            video_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    video_out_TDATA_int <= ((p_Val2_27_fu_1397_p2 & p_Val2_26_fu_1339_p2) & p_Val2_s_fu_1281_p2);
    video_out_TVALID <= regslice_both_video_out_data_U_vld_out;

    video_out_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            video_out_TVALID_int <= ap_const_logic_1;
        else 
            video_out_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    write_ready_V_0_ack_out_assign_proc : process(eol_V_reg_1476, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (eol_V_reg_1476 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            write_ready_V_0_ack_out <= ap_const_logic_1;
        else 
            write_ready_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1192_1_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_4_fu_1091_p1),59));
    zext_ln1192_2_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_5_fu_1115_p1),51));
    zext_ln1192_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_3_fu_1049_p1),51));
    zext_ln209_1_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(copy1_histogram_V_q0),32));
    zext_ln209_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(copy2_histogram_V_q0),32));
    zext_ln415_1_fu_1277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_1_fu_1271_p2),8));
    zext_ln415_2_fu_1335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_2_fu_1329_p2),8));
    zext_ln415_3_fu_1393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_3_fu_1387_p2),8));
    zext_ln415_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_fu_745_p2),8));
    zext_ln544_1_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newY_V_4_fu_755_p2),64));
    zext_ln544_2_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(address_counter_V),64));
    zext_ln544_3_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(address_counter_V),64));
    zext_ln544_4_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(address_counter_V),64));
    zext_ln544_5_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(address_counter_V),64));
    zext_ln544_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newY_V_4_fu_755_p2),64));
    zext_ln700_1_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newY_V_4_reg_1615_pp0_iter4_reg),32));
    zext_ln700_2_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newY_V_1_reg_1742),32));
    zext_ln700_3_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newY_V_3_reg_1721),32));
    zext_ln700_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newY_V_4_reg_1615_pp0_iter4_reg),32));
    zext_ln703_2_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_V_reg_1486),27));
    zext_ln703_3_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(R_V_fu_543_p4),26));
    zext_ln703_5_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_2_fu_1078_p1),59));
    zext_ln703_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_fu_529_p1),25));
    zext_ln728_1_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_1033_p3),51));
    zext_ln728_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_1033_p3),59));
end behav;
